Search.setIndex({"docnames": ["explanations/index", "how-to/appending_to_xarray", "how-to/building_xarray_datasets", "how-to/index", "index", "reference/api/agent/AcquisitionFunction", "reference/api/agent/AgentClient", "reference/api/agent/DowShampoo_SampleDriver", "reference/api/agent/EI_AcquisitionFunction", "reference/api/agent/GaussianProcess", "reference/api/agent/HscedGaussianProcess", "reference/api/agent/Metric", "reference/api/agent/Multimodal_AL_SampleDriver", "reference/api/agent/Multimodal_AgentDriver", "reference/api/agent/PhaseLabeler", "reference/api/agent/PhaseMap", "reference/api/agent/PhaseMap_pandas", "reference/api/agent/SANS_AL_SampleDriver", "reference/api/agent/SAS_AL_SampleDriver", "reference/api/agent/SAS_AgentDriver", "reference/api/agent/SAS_Grid_AL_SampleDriver", "reference/api/agent/SAXS_AL_SampleDriver", "reference/api/agent/UCB_AcquisitionFunction", "reference/api/agent/WatchDog", "reference/api/agent/index", "reference/api/agent/reduce_usaxs", "reference/api/agent/util", "reference/api/agent/vSAS_NoDeck_AL_SampleDriver", "reference/api/agent/xarray_extensions", "reference/api/double_agent/AcquisitionFunction", "reference/api/double_agent/AgentClient", "reference/api/double_agent/AgentDriver", "reference/api/double_agent/AutoSAS", "reference/api/double_agent/AutoSAS_Driver", "reference/api/double_agent/Boundary", "reference/api/double_agent/Extrapolator", "reference/api/double_agent/Generator", "reference/api/double_agent/MaskGrid", "reference/api/double_agent/PairMetric", "reference/api/double_agent/PhaseLabeler", "reference/api/double_agent/Pipeline", "reference/api/double_agent/PipelineContext", "reference/api/double_agent/PipelineOp", "reference/api/double_agent/Preprocessor", "reference/api/double_agent/TensorFlowExtrapolator", "reference/api/double_agent/index", "reference/api/double_agent/plotting", "reference/api/double_agent/util", "reference/api/double_agent/xarray_extensions", "reference/index", "tutorials/building_pipelines", "tutorials/getting_started", "tutorials/index", "tutorials/installation"], "filenames": ["explanations/index.rst", "how-to/appending_to_xarray.rst", "how-to/building_xarray_datasets.rst", "how-to/index.rst", "index.rst", "reference/api/agent/AcquisitionFunction.rst", "reference/api/agent/AgentClient.rst", "reference/api/agent/DowShampoo_SampleDriver.rst", "reference/api/agent/EI_AcquisitionFunction.rst", "reference/api/agent/GaussianProcess.rst", "reference/api/agent/HscedGaussianProcess.rst", "reference/api/agent/Metric.rst", "reference/api/agent/Multimodal_AL_SampleDriver.rst", "reference/api/agent/Multimodal_AgentDriver.rst", "reference/api/agent/PhaseLabeler.rst", "reference/api/agent/PhaseMap.rst", "reference/api/agent/PhaseMap_pandas.rst", "reference/api/agent/SANS_AL_SampleDriver.rst", "reference/api/agent/SAS_AL_SampleDriver.rst", "reference/api/agent/SAS_AgentDriver.rst", "reference/api/agent/SAS_Grid_AL_SampleDriver.rst", "reference/api/agent/SAXS_AL_SampleDriver.rst", "reference/api/agent/UCB_AcquisitionFunction.rst", "reference/api/agent/WatchDog.rst", "reference/api/agent/index.rst", "reference/api/agent/reduce_usaxs.rst", "reference/api/agent/util.rst", "reference/api/agent/vSAS_NoDeck_AL_SampleDriver.rst", "reference/api/agent/xarray_extensions.rst", "reference/api/double_agent/AcquisitionFunction.rst", "reference/api/double_agent/AgentClient.rst", "reference/api/double_agent/AgentDriver.rst", "reference/api/double_agent/AutoSAS.rst", "reference/api/double_agent/AutoSAS_Driver.rst", "reference/api/double_agent/Boundary.rst", "reference/api/double_agent/Extrapolator.rst", "reference/api/double_agent/Generator.rst", "reference/api/double_agent/MaskGrid.rst", "reference/api/double_agent/PairMetric.rst", "reference/api/double_agent/PhaseLabeler.rst", "reference/api/double_agent/Pipeline.rst", "reference/api/double_agent/PipelineContext.rst", "reference/api/double_agent/PipelineOp.rst", "reference/api/double_agent/Preprocessor.rst", "reference/api/double_agent/TensorFlowExtrapolator.rst", "reference/api/double_agent/index.rst", "reference/api/double_agent/plotting.rst", "reference/api/double_agent/util.rst", "reference/api/double_agent/xarray_extensions.rst", "reference/index.rst", "tutorials/building_pipelines.rst", "tutorials/getting_started.rst", "tutorials/index.rst", "tutorials/installation.rst"], "titles": ["Explanations", "Appending Data to xarray.Datasets", "Building xarray.Datasets from Scratch", "How-To Guides", "AFL-agent", "AFL.agent.AcquisitionFunction module", "AFL.agent.AgentClient module", "AFL.agent.DowShampoo_SampleDriver module", "AFL.agent.EI_AcquisitionFunction module", "AFL.agent.GaussianProcess module", "AFL.agent.HscedGaussianProcess module", "AFL.agent.Metric module", "AFL.agent.Multimodal_AL_SampleDriver module", "AFL.agent.Multimodal_AgentDriver module", "AFL.agent.PhaseLabeler module", "AFL.agent.PhaseMap module", "AFL.agent.PhaseMap_pandas module", "AFL.agent.SANS_AL_SampleDriver module", "AFL.agent.SAS_AL_SampleDriver module", "AFL.agent.SAS_AgentDriver module", "AFL.agent.SAS_Grid_AL_SampleDriver module", "AFL.agent.SAXS_AL_SampleDriver module", "AFL.agent.UCB_AcquisitionFunction module", "AFL.agent.WatchDog module", "AFL.agent package", "AFL.agent.reduce_usaxs module", "AFL.agent.util module", "AFL.agent.vSAS_NoDeck_AL_SampleDriver module", "AFL.agent.xarray_extensions module", "AFL.double_agent.AcquisitionFunction module", "AFL.double_agent.AgentClient module", "AFL.double_agent.AgentDriver module", "AFL.double_agent.AutoSAS module", "AFL.double_agent.AutoSAS_Driver module", "AFL.double_agent.Boundary module", "AFL.double_agent.Extrapolator module", "AFL.double_agent.Generator module", "AFL.double_agent.MaskGrid module", "AFL.double_agent.PairMetric module", "AFL.double_agent.PhaseLabeler module", "AFL.double_agent.Pipeline module", "AFL.double_agent.PipelineContext module", "AFL.double_agent.PipelineOp module", "AFL.double_agent.Preprocessor module", "AFL.double_agent.TensorFlowExtrapolator module", "AFL.double_agent API", "AFL.double_agent.plotting module", "AFL.double_agent.util module", "AFL.double_agent.xarray_extensions module", "Reference", "Building Pipelines", "Quick Start Example", "Tutorials", "Setup"], "terms": {"tho": 0, "goal": 0, "thi": [0, 1, 2, 4, 8, 22, 29, 35, 36, 38, 40, 43, 47, 50, 51, 53], "section": [0, 4], "i": [0, 1, 2, 4, 24, 25, 38, 40, 43, 47, 49, 50, 51, 53], "deepen": 0, "broaden": 0, "your": [0, 4, 50, 51, 53], "understand": [0, 50], "afl": [0, 49, 50, 51, 52, 53], "agent": [0, 40, 51, 52, 53], "codebas": [0, 50], "project": [0, 16], "underli": [0, 4], "concept": [0, 4, 51], "tutori": [1, 2, 4, 50, 51], "work": [1, 2, 8, 22, 50, 53], "progress": [1, 2, 50], "specif": [3, 4, 50], "task": [3, 4], "build": [3, 4, 40, 51, 52, 53], "xarrai": [3, 4, 29, 35, 36, 38, 42, 43, 50, 51], "dataset": [3, 4, 11, 28, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 46, 48, 50, 51], "from": [3, 4, 25, 29, 40, 43, 50, 51], "scratch": [3, 4], "append": [3, 4, 16, 28, 40, 48], "data": [3, 4, 11, 25, 28, 35, 36, 42, 43, 48, 49, 51], "python": [4, 40, 47, 53], "librari": 4, "implement": 4, "autonom": 4, "activ": [4, 41, 53], "learn": 4, "materi": 4, "scienc": 4, "applic": 4, "describ": 4, "manuscript": 4, "small": 4, "angl": [4, 25], "scatter": [4, 16], "acceler": 4, "soft": 4, "formul": 4, "optim": [4, 35], "The": [4, 24, 40, 43, 47, 49, 50, 53], "design": 4, "guid": [4, 52, 53], "experiment": 4, "measur": [4, 16, 29, 43, 50, 51], "campaign": 4, "effici": 4, "map": 4, "phase": [4, 51], "boundari": [4, 45, 49], "properti": [4, 16, 35], "us": [4, 24, 29, 35, 36, 40, 43, 47, 49, 50, 51, 52, 53], "advanc": 4, "machin": [4, 53], "techniqu": 4, "oper": [4, 40, 42, 43, 49, 50, 51], "can": [4, 50, 53], "compos": 4, "pipelin": [4, 41, 43, 49, 51, 52], "ar": [4, 25, 29, 37, 38, 40, 41, 43, 47], "modular": 4, "visualiz": 4, "serializ": 4, "self": [4, 22, 29, 34, 35, 36, 38, 40, 42, 43], "document": 4, "trivial": 4, "support": [4, 53], "multimod": 4, "process": [4, 35, 49], "all": [4, 25, 29, 35, 36, 38, 40, 42, 43, 50, 51, 53], "intermedi": 4, "store": [4, 40, 50], "base": [4, 5, 8, 11, 14, 16, 22, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 48, 53], "model": [4, 8, 41], "rich": 4, "visual": 4, "tool": [4, 53], "analyz": [4, 25], "calcul": [4, 11, 25, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 50, 51], "you": [4, 51, 53], "pip": [4, 53], "git": [4, 53], "http": [4, 41, 53], "github": [4, 53], "com": [4, 41, 53], "usnistgov": [4, 53], "pleas": [4, 24, 49], "see": [4, 41, 51, 53], "setup": [4, 52], "page": 4, "more": [4, 29, 50, 51], "detail": [4, 50, 51], "If": [4, 40, 43, 53], "research": 4, "cite": 4, "under": 4, "review": 4, "organ": 4, "accord": [4, 36], "philosphi": 4, "diataxi": 4, "fr": 4, "It": [4, 43], "four": 4, "step": [4, 36, 52], "beginn": [4, 52], "how": [4, 41], "explan": [4, 51], "discuss": 4, "outlin": 4, "principl": 4, "refer": 4, "technic": [4, 47], "prerequisit": 4, "basic": [4, 51], "develop": 4, "option": 4, "depend": [4, 51], "branch": 4, "offlin": 4, "troubleshoot": 4, "quick": [4, 50, 52], "start": [4, 50, 52], "exampl": [4, 47, 50, 52], "To": [4, 50, 53], "doubl": 4, "api": 4, "class": [5, 8, 11, 14, 16, 22, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48], "acquisit": [5, 8, 22, 24, 29], "object": [5, 8, 11, 14, 16, 22, 28, 35, 41, 43, 47, 48, 50], "add_exclus": [5, 8, 22], "point": [5, 8, 11, 22, 25, 29, 35], "copi": [5, 8, 11, 14, 16, 22, 28, 40, 42, 48, 53], "execut": [5, 8, 22, 40], "get_next_sampl": [5, 8, 22, 29], "nth": [5, 8, 22], "0": [5, 8, 16, 22, 26, 28, 29, 34, 36, 38, 43, 48, 50, 51], "composition_check": [5, 8, 22], "none": [5, 8, 11, 14, 16, 22, 25, 26, 28, 29, 34, 35, 38, 39, 40, 42, 43, 46, 48, 53], "plot": [5, 8, 16, 22, 34, 35, 42, 45, 49, 50], "mask": [5, 8, 22, 25, 28, 37, 48], "fals": [5, 8, 22, 28, 34, 39, 40, 43, 48], "kwarg": [5, 8, 11, 22], "reset_phasemap": [5, 8, 22], "phasemap": [5, 8, 14, 16, 22, 24, 49], "iterationcombin": [5, 24], "function1": 5, "function2": 5, "function2_frequ": 5, "5": [5, 43], "calculate_metr": [5, 8, 22], "gp": [5, 8, 22], "lowestdens": [5, 24], "bandwidth": 5, "075": 5, "y_mean": 5, "y_var": 5, "random": [5, 24], "varianc": [5, 24], "gauss2d": [5, 8, 22, 24], "x": [5, 8, 11, 22, 25, 28, 48, 50, 51], "y": [5, 8, 22, 25, 43], "cx": [5, 8, 22], "cy": [5, 8, 22], "sx": [5, 8, 22], "1": [5, 8, 16, 22, 25, 26, 28, 29, 36, 38, 43, 47, 48, 51], "sy": [5, 8, 22], "sample_randomli": [8, 22], "ei": [8, 24], "model_typ": 8, "classifi": [8, 22, 35], "function": [8, 22, 29], "singl": 8, "either": 8, "regressor": [8, 22, 35], "specifi": [8, 43, 50], "init": 8, "pseudoei": [8, 24], "thompson_sampl": [8, 22], "two": [8, 22], "onli": [8, 22, 38], "One": [8, 22], "ha": [8, 22, 53], "other": [8, 22, 51], "need": [8, 22, 40, 53], "generaliz": [8, 22], "requir": [8, 22, 40], "some": [8, 22], "thought": [8, 22], "gpr": [8, 22], "delaunai": [11, 24, 38, 45], "data_vari": [11, 14], "param": [11, 14, 38, 39, 50, 51], "similar": [11, 24, 38, 45, 51], "comput": [11, 25, 50, 51], "triangul": 11, "given": 11, "arrai": [11, 25], "shape": [11, 16, 50], "num_nod": 11, "2": [11, 28, 34, 43, 47, 48], "return": [11, 25, 38, 40, 41], "adjac": 11, "matrix": [11, 38], "distanc": [11, 24, 38, 45], "name": [11, 28, 29, 34, 35, 36, 37, 38, 39, 40, 42, 43, 48, 50, 53], "constrain_sam": [11, 38], "constrain_differ": [11, 38], "dummi": [11, 24, 38, 45], "apply_constraint": [11, 38], "arg": [11, 22], "normalize1": [11, 38], "normalize2": [11, 38], "to_dict": 11, "multimetr": [11, 24], "combine_bi": [11, 38], "prod": [11, 38], "combine_by_pow": [11, 38], "combine_by_coeff": [11, 38], "data_list": [11, 38], "sum": [11, 38], "update_nam": 11, "listifi": [11, 24, 45, 47], "obj": [11, 47], "affinitypropag": [14, 24, 39, 45], "label": [14, 16, 28, 35, 46, 48, 50, 51], "dbscan": [14, 24], "gaussianmixturemodel": [14, 24, 39, 45], "kerasclassifi": [14, 24], "model_path": 14, "model_q": 14, "deriv0": 14, "transpose_var": 14, "sampl": [14, 28, 29, 35, 38, 39, 48, 50, 51], "remap_labels_by_count": [14, 39], "silhouett": [14, 39], "w": [14, 39], "spectralclust": [14, 24, 39, 45, 50, 51], "compon": [16, 26, 28, 29, 34, 36, 43, 46, 48, 49, 50, 51], "contain": [16, 40], "composit": [16, 26, 28, 29, 35, 43, 48, 50, 51], "label_encod": 16, "labels_ordin": [16, 28, 48], "numer": [16, 43], "sort": 16, "spatial": 16, "posit": 16, "classmethod": [16, 41], "load": 16, "fname": 16, "ncompon": 16, "rescal": 16, "true": [16, 26, 28, 35, 40, 42, 43, 46, 48], "mpl_kw": [16, 28, 46, 48], "save": 16, "size": 16, "slice": [16, 43], "indic": [16, 43], "update_encod": 16, "phasemapmodel": [16, 24], "phasemapview_mpl": [16, 24], "cmap": 16, "jet": 16, "line": 16, "xy": [16, 43], "ax": [16, 26, 28, 48], "make_ax": 16, "subplot": 16, "scatter_ternari": 16, "cart2ternari": [16, 24], "ternari": [16, 26, 28, 43, 46, 48], "cartesian": [16, 26, 28, 36, 48], "coorid": 16, "composition_grid": [16, 24, 26], "pts_per_row": [16, 26, 28, 36, 48], "50": [16, 26, 28, 36, 48], "basi": [16, 26, 28, 36, 48], "100": [16, 51], "dim": [16, 26, 28, 36, 39, 43, 48, 50, 51], "3": [16, 26, 36, 43, 53], "ep": [16, 26, 36], "1e": [16, 26, 28, 36, 48], "09": [16, 26, 36], "format_plot_ternari": [16, 24], "label_a": 16, "label_b": 16, "label_c": 16, "phasemap_grid_factori": [16, 24], "rescale_composit": [16, 24], "remove_zero": 16, "ternary2cart": [16, 24], "get_next_sample_passthrough": [22, 24], "next_sampl": [22, 29, 50, 51], "pseudoucb": [22, 24, 29, 45], "scale": [22, 43], "modul": [24, 45, 49, 51], "deprec": [24, 49], "remov": [24, 25, 43, 49], "futur": [24, 49], "version": [24, 49, 53], "double_ag": [24, 49, 50, 51], "instead": [24, 49], "acquisitionfunct": [24, 45, 49], "ei_acquisitionfunct": [24, 49], "ucb_acquisitionfunct": [24, 49], "gaussianprocess": [24, 49], "hscedgaussianprocess": [24, 49], "phaselabel": [24, 45, 49], "phasemap_panda": [24, 49], "metric": [24, 49, 50, 51], "agentcli": [24, 45, 49], "sas_agentdriv": [24, 49], "multimodal_agentdriv": [24, 49], "dowshampoo_sampledriv": [24, 49], "sans_al_sampledriv": [24, 49], "saxs_al_sampledriv": [24, 49], "sas_al_sampledriv": [24, 49], "sas_grid_al_sampledriv": [24, 49], "multimodal_al_sampledriv": [24, 49], "vsas_nodeck_al_sampledriv": [24, 49], "watchdog": [24, 49], "xarray_extens": [24, 45, 49], "afl_dataarraytool": [24, 28, 45, 48], "afl_datasettool": [24, 28, 45, 48], "compositiontool": [24, 28, 45, 48], "labeltool": [24, 28, 45, 48], "scatteringtool": [24, 28, 45, 48], "util": [24, 28, 48, 49], "reduce_usax": [24, 49], "amplifier_correct": [24, 25], "calc_r_q": [24, 25], "centroid": [24, 25], "reduce_uascan": [24, 25], "remove_masked_data": [24, 25], "composition_grid_ternari": [24, 26], "mpl_format_ternari": [24, 26], "ternary_to_xi": [24, 26, 28, 48], "r": 25, "q": [25, 28, 43, 48, 50], "raw": 25, "usax": 25, "signal": [25, 43], "second": [25, 43], "dark": 25, "gain": 25, "correct": [25, 43], "amplifi": 25, "current": [25, 28, 40, 41, 48], "v": 25, "": [25, 38, 47, 50, 51], "t": [25, 40, 47], "d": [25, 28, 48, 50, 51], "g": [25, 50], "wavelength": [25, 50], "pd": 25, "pd_bkg": 25, "pd_gain": 25, "i0": 25, "i0_bkg": 25, "i0_gain": 25, "ar_cent": 25, "v_f_gain": 25, "paramet": [25, 40, 43, 47], "float": [25, 29, 34, 36, 43], "lambda": [25, 29], "A": [25, 28, 43, 47, 48, 50, 51], "center": 25, "rock": 25, "curv": 25, "along": [25, 43, 50], "axi": 25, "numpi": [25, 43, 50, 51], "ndarrai": [25, 38], "crystal": 25, "count": [25, 29], "time": 25, "each": [25, 50], "photodiod": 25, "background": 25, "incid": 25, "monitor": 25, "i0_amp_gain": 25, "voltag": 25, "frequenc": 25, "convert": 25, "qvec": 25, "rvec": 25, "i_o": 25, "dictionari": [25, 42], "root": 25, "reduct": 25, "livedata": 25, "conveni": 25, "routin": 25, "range_spec": 26, "label_right": 26, "label_top": 26, "label_left": 26, "comp": 26, "normal": [26, 28, 38, 48], "coordin": [26, 28, 43, 48], "da": [28, 48], "data_dict": [28, 48], "concat_dim": [28, 48], "warn": [28, 43, 48], "much": [28, 48], "loss": [28, 48], "add_grid": [28, 48], "dim_nam": [28, 48], "grid": [28, 29, 35, 36, 37, 43, 48], "overwrit": [28, 48], "get": [28, 40, 48, 51], "get_grid": [28, 48], "get_grid_old": [28, 48], "get_range_sc": [28, 48], "spec": [28, 48], "get_standard_sc": [28, 48], "plot_3d": [28, 48], "set_label": [28, 48], "plot_continu": 28, "plot_discret": 28, "plot_mask": [28, 48], "mask_nam": [28, 48], "components_nam": [28, 48], "components_grid": [28, 48], "plot_scatt": [28, 48], "set_axes_label": [28, 46, 48], "discrete_label": [28, 46, 48], "plot_surfac": [28, 48], "make_default": [28, 48], "make_ordin": [28, 48], "ordinal_nam": [28, 48], "labels_nam": [28, 48], "sortbi": [28, 48], "clean": [28, 43, 48], "qlo": [28, 48], "qhi": [28, 48], "qlo_isel": [28, 48], "qhi_isel": [28, 48], "pedest": [28, 43, 48], "12": [28, 48], "npt": [28, 43, 48], "250": [28, 43, 48], "deriv": [28, 43, 48, 50, 51], "sgf_window_length": [28, 48], "31": [28, 43, 48], "sgf_polyord": [28, 48], "apply_log_scal": [28, 43, 48], "plot_linlin": [28, 48], "logq": [28, 48], "ylabel": [28, 48], "intens": [28, 48], "u": [28, 48], "xlabel": [28, 48], "\u00e5": [28, 48], "legend": [28, 48], "plot_loglog": [28, 48], "plot_logwaterfal": [28, 48], "10": [28, 48, 51], "plot_waterfal": [28, 48], "preprocess_data": [28, 48], "xname": [28, 48], "yname": [28, 48], "xlo": [28, 43, 48], "xhi": [28, 43, 48], "xlo_isel": [28, 43, 48], "xhi_isel": [28, 43, 48], "logx": [28, 48], "logi": [28, 48], "gather": 29, "one": [29, 50], "input": [29, 36, 40, 43, 47], "inform": 29, "choos": 29, "suppli": [29, 35, 36, 38, 43], "except": [29, 41], "acquisitionerror": [29, 45], "rais": [29, 43], "when": [29, 43], "an": [29, 40, 47], "error": [29, 53], "decis": 29, "occur": 29, "input_vari": [29, 34, 36, 37, 38, 39, 40, 42, 43, 50, 51], "list": [29, 34, 35, 36, 38, 40, 41, 42, 43, 46, 47], "str": [29, 34, 35, 36, 38, 40, 42, 43, 46, 47], "grid_vari": [29, 35, 36], "grid_dim": [29, 35, 36], "output_prefix": [29, 34, 35, 37, 42, 50, 51], "output_vari": [29, 35, 36, 37, 38, 39, 40, 42, 43, 50, 51], "next_composit": 29, "decision_rtol": 29, "05": 29, "excluded_comps_vari": 29, "excluded_comps_dim": 29, "exclusion_radiu": [29, 36], "001": [29, 36], "int": [29, 36, 43], "acquisitionfunctionbas": 29, "pipelineop": [29, 34, 35, 36, 37, 38, 39, 40, 43, 45, 47, 49], "appli": [29, 35, 36, 37, 38, 43, 50], "exclude_previous_sampl": 29, "modifi": 29, "surfac": 29, "place": 29, "gaussian": [29, 35], "exclus": 29, "zone": 29, "over": [29, 43, 47, 50], "previous": 29, "next": 29, "evalu": 29, "provid": [29, 35, 36, 40, 42], "method": [29, 40, 47], "first": [29, 43, 50, 51], "find": [29, 43], "within": 29, "maximum": [29, 43], "valu": [29, 38, 43, 50], "set": 29, "randomli": 29, "maxvalueaf": [29, 45, 50, 51], "combine_coeff": 29, "multimodalmask_maxvalueaf": [29, 45], "decision_vari": 29, "mask_label_vari": 29, "phase_select_coord": 29, "dict": [29, 36, 38, 40, 43, 47], "randomaf": [29, 45], "without": [29, 47, 53], "exclud": 29, "previou": 29, "boundaryscor": [34, 45], "gt_hull_vari": 34, "al_hull_vari": 34, "boundary_scor": 34, "bool": [34, 40, 43, 46], "concavehul": [34, 45], "hull_tracing_ratio": 34, "drop_phas": 34, "component_dim": [34, 36, 43, 46], "label_vari": 34, "segmentize_length": 34, "025": 34, "allow_hol": 34, "take": [35, 36, 40, 43], "discret": 35, "onto": [35, 43], "dummyextrapol": [35, 45], "feature_input_vari": [35, 50, 51], "predictor_input_vari": [35, 50, 51], "sample_dim": [35, 36, 38, 43], "mpl_kwarg": [35, 42], "figur": [35, 42], "gaussianprocessclassifi": [35, 45, 50, 51], "kernel": 35, "fmin_l_bfgs_b": 35, "gaussianprocessregressor": [35, 45], "predictor_uncertainty_vari": 35, "fix_nan": 35, "parametr": 36, "barycentricgrid": [36, 45], "barycentricgridgener": 36, "cartesiangrid": [36, 45], "grid_spec": 36, "cartesiangridgener": 36, "produc": [36, 37, 38, 40], "min": [36, 43], "max": [36, 43], "gaussianpoint": [36, 45], "comps_dim": 36, "exclusion_depth": 36, "gaussianpointsgener": 36, "generatorbas": 36, "stub": [36, 43], "pairmetr": [37, 45, 49], "pair": [37, 38], "matric": [37, 38], "result": [37, 38, 40, 47, 50], "mask_vari": 37, "grid_dim_in": 37, "grid_dim_out": 37, "renam": 37, "output": [37, 40, 42, 50], "dimens": [37, 43, 50], "combinemetr": [38, 45], "number": [38, 43], "ani": [38, 41, 47, 53], "delaunaymetr": 38, "distancemetr": 38, "dummymetr": 38, "j": 38, "constrain": 38, "perfectli": 38, "dissimilar": 38, "diagon": 38, "equal": 38, "between": [38, 50, 51], "similaritymetr": 38, "use_silhouett": 39, "should": [40, 42, 50], "format": 40, "pipelinesop": 40, "constructor": [40, 43, 47], "have": [40, 43, 47, 53], "exact": 40, "signatur": 40, "pipelineopbas": [40, 42], "write": 40, "xr": [40, 50, 51], "dataarrai": 40, "prefer": 40, "op": [40, 43, 47], "pipelinecontext": [40, 45, 49], "defin": [40, 50], "mirror": 40, "behavior": 40, "tiled_data": [40, 42], "disable_progress_bar": 40, "clear_output": 40, "clear": 40, "draw": 40, "figsiz": 40, "8": 40, "edge_label": 40, "graph": 40, "draw_plotli": 40, "extend": 40, "variabl": [40, 41, 43, 50], "fulli": 40, "includ": 40, "gener": [40, 43, 45, 49, 51, 53], "aren": 40, "These": 40, "hopefulli": 40, "distinguish": 40, "isn": 40, "enforc": 40, "moment": 40, "make_graph": 40, "networkx": 40, "represent": 40, "print": [40, 47, 50], "summari": [40, 43], "print_cod": 40, "string": [40, 47], "approxim": 40, "code": 40, "run": [40, 50, 51], "attribut": 40, "fail": 40, "edit": [40, 53], "mai": 40, "ident": 40, "caution": 40, "static": 40, "read": 40, "filenam": 40, "pickl": 40, "file": [40, 53], "disk": 40, "import": [40, 50, 51, 53], "pipeline1": 40, "pickled_pipelin": 40, "pkl": 40, "search": [40, 43], "filepath": 40, "written": 40, "nocontextexcept": [41, 45], "inherit": [41, 42], "allow": 41, "context": [41, 50, 51], "manag": [41, 50, 51], "abus": 41, "stackoverflow": 41, "question": 41, "49573131": 41, "pymc3": 41, "assign": 41, "_thread": 41, "_local": 41, "get_context": 41, "deepest": 41, "stack": 41, "input_prefix": 42, "abc": 42, "abstract": 42, "processor": 42, "add_to_dataset": 42, "copy_dataset": 42, "add": [42, 50, 51], "add_to_til": 42, "tile": 42, "catalogu": 42, "preprocess": 43, "transform": 43, "arraytovar": [43, 45], "split_dim": 43, "postfix": 43, "squeez": 43, "datasettovar": 43, "extract": 43, "insert": 43, "split": 43, "datarrai": 43, "ad": [43, 50], "call": 43, "barycentrictoternaryxi": [43, 45], "note": 43, "adapt": 43, "barycentr": 43, "mpltern": 43, "yuzie007": 43, "destandard": [43, 45], "scale_vari": 43, "min_val": 43, "max_val": 43, "extrema": [43, 45], "return_coord": 43, "slice_dim": 43, "preprocessorbas": 43, "savgolfilt": [43, 45, 50, 51], "window_length": 43, "polyord": 43, "smooth": 43, "via": 43, "savitski": 43, "golai": 43, "filter": 43, "scipi": 43, "savgol_filt": 43, "below": [43, 50], "taken": 43, "trim": 43, "order": [43, 50], "former": 43, "while": [43, 47], "latter": 43, "integ": 43, "advis": 43, "both": 43, "varieti": 43, "attempt": [43, 47], "log10": 43, "new": [43, 50, 53], "creat": [43, 50, 51, 53], "log_": 43, "duplic": 43, "multipl": [43, 53], "same": 43, "averag": 43, "nan": 43, "fill": 43, "interpol": 43, "constant": 43, "minimum": 43, "geometr": 43, "rather": 43, "than": 43, "linearli": 43, "space": 43, "remain": 43, "drop": 43, "final": [43, 50, 51], "standard": [43, 45], "subtract": [43, 45], "coord_valu": 43, "baselin": 43, "subtractmin": [43, 45], "sympytransform": [43, 45], "transform_dim": 43, "sympi": 43, "express": 43, "ternaryxytobarycentr": [43, 45], "varstoarrai": [43, 45], "variable_dim": 43, "variable_map": 43, "zscale": [43, 45], "z": 43, "mean": 43, "deviat": 43, "zscaleerror": [43, 45], "zscale_error": 43, "y_err": 43, "autosa": [45, 49], "extrapol": [45, 49, 51], "maskgrid": [45, 49], "preprocessor": [45, 49], "tensorflowextrapol": [45, 49], "extract_paramet": [45, 47], "plot_scatter_mpl": [45, 46], "plot_surface_mpl": [45, 46], "autosas_driv": [45, 49], "agentdriv": [45, 49], "component_vari": 46, "artist": 46, "collect": 47, "helper": 47, "__init__": 47, "reconstruct": 47, "target": 47, "try": [47, 53], "typic": 47, "make": [47, 53], "iter": 47, "primari": 47, "case": 47, "handl": 47, "sometim": 47, "length": 47, "alwai": 47, "pass": 47, "In": [47, 50], "particular": 47, "which": [47, 50], "we": [47, 50, 51], "do": 47, "want": [47, 51, 53], "def": 47, "my_func": 47, "out": 47, "test": [47, 53], "last": 47, "would": 47, "been": 47, "e": [47, 50, 51, 53], "newlin": 47, "component_var": 48, "core": 49, "apiserv": 49, "driver": 49, "packag": [49, 53], "autom": [49, 53], "here": 50, "ll": [50, 53], "go": 50, "doc": [50, 51], "getting_start": 50, "itself": 50, "fit": 50, "let": [50, 51], "power": 50, "flexibl": 50, "structur": 50, "multi": 50, "dimension": 50, "np": [50, 51], "so": 50, "user": 50, "san": 50, "sax": 50, "uv": 50, "vi": 50, "etc": 50, "energi": 50, "wavenumb": 50, "data_var": [50, 51], "coord": [50, 51], "b": [50, 51], "c": [50, 51], "show": 50, "screenshot": 50, "begin": 50, "instanti": 50, "construct": 50, "shown": 50, "approach": 50, "automat": 50, "my_first_pipelin": 50, "keyword": 50, "argument": 50, "inspect": 50, "printout": 50, "isel": 50, "loook": 50, "onc": 50, "cosin": [50, 51], "extrap": [50, 51], "extrap_vari": [50, 51], "short": 51, "help": 51, "building_pipelin": 51, "synthet": 51, "n_sampl": 51, "n_point": 51, "linspac": 51, "ds_out": 51, "break": 51, "down": 51, "what": 51, "happen": 51, "necessari": [51, 53], "syntax": 51, "sever": [51, 53], "group": [51, 53], "cluster": 51, "togeth": 51, "select": 51, "highest": 51, "entropi": 51, "our": 51, "now": 51, "ve": 51, "seen": 51, "might": 51, "complic": 51, "architectur": 51, "cover": 53, "differ": 53, "wai": 53, "befor": 53, "ensur": 53, "11": 53, "later": 53, "sourc": 53, "simplest": 53, "directli": 53, "For": 53, "clone": 53, "repositori": 53, "mode": 53, "cd": 53, "jupyt": 53, "notebook": 53, "tensorflow": 53, "gpflow": 53, "pytorch": 53, "featur": 53, "dev": 53, "squar": 53, "bracket": 53, "commit": 53, "hash": 53, "environ": 53, "internet": 53, "access": 53, "wheel": 53, "On": 53, "whl": 53, "afl_ag": 53, "py3": 53, "common": 53, "issu": 53, "solut": 53, "conflict": 53, "encount": 53, "virtual": 53, "m": 53, "venv": 53, "bin": 53, "window": 53, "script": 53, "miss": 53, "after": 53, "failur": 53, "sure": 53, "latest": 53, "upgrad": 53, "setuptool": 53}, "objects": {"AFL.agent": [[5, 0, 0, "-", "AcquisitionFunction"], [8, 0, 0, "-", "EI_AcquisitionFunction"], [11, 0, 0, "-", "Metric"], [14, 0, 0, "-", "PhaseLabeler"], [15, 0, 0, "-", "PhaseMap"], [16, 0, 0, "-", "PhaseMap_pandas"], [22, 0, 0, "-", "UCB_AcquisitionFunction"], [25, 0, 0, "-", "reduce_usaxs"], [26, 0, 0, "-", "util"], [28, 0, 0, "-", "xarray_extensions"]], "AFL.agent.AcquisitionFunction": [[5, 1, 1, "", "Acquisition"], [5, 1, 1, "", "IterationCombined"], [5, 1, 1, "", "LowestDensity"], [5, 1, 1, "", "Random"], [5, 1, 1, "", "Variance"], [5, 3, 1, "", "gauss2d"]], "AFL.agent.AcquisitionFunction.Acquisition": [[5, 2, 1, "", "add_exclusion"], [5, 2, 1, "", "copy"], [5, 2, 1, "", "execute"], [5, 2, 1, "", "get_next_sample"], [5, 2, 1, "", "plot"], [5, 2, 1, "", "reset_phasemap"]], "AFL.agent.AcquisitionFunction.IterationCombined": [[5, 2, 1, "", "calculate_metric"], [5, 2, 1, "", "reset_phasemap"]], "AFL.agent.AcquisitionFunction.LowestDensity": [[5, 2, 1, "", "calculate_metric"]], "AFL.agent.AcquisitionFunction.Random": [[5, 2, 1, "", "calculate_metric"]], "AFL.agent.AcquisitionFunction.Variance": [[5, 2, 1, "", "calculate_metric"]], "AFL.agent.EI_AcquisitionFunction": [[8, 1, 1, "", "Acquisition"], [8, 1, 1, "", "EI"], [8, 3, 1, "", "gauss2d"], [8, 1, 1, "", "pseudoEI"]], "AFL.agent.EI_AcquisitionFunction.Acquisition": [[8, 2, 1, "", "add_exclusion"], [8, 2, 1, "", "copy"], [8, 2, 1, "", "execute"], [8, 2, 1, "", "get_next_sample"], [8, 2, 1, "", "plot"], [8, 2, 1, "", "reset_phasemap"]], "AFL.agent.EI_AcquisitionFunction.EI": [[8, 2, 1, "", "calculate_metric"]], "AFL.agent.EI_AcquisitionFunction.pseudoEI": [[8, 2, 1, "", "calculate_metric"]], "AFL.agent.Metric": [[11, 1, 1, "", "Delaunay"], [11, 1, 1, "", "Distance"], [11, 1, 1, "", "Dummy"], [11, 1, 1, "", "Metric"], [11, 1, 1, "", "MultiMetric"], [11, 1, 1, "", "Similarity"], [11, 3, 1, "", "listify"]], "AFL.agent.Metric.Delaunay": [[11, 2, 1, "", "calculate"]], "AFL.agent.Metric.Distance": [[11, 2, 1, "", "calculate"]], "AFL.agent.Metric.Dummy": [[11, 2, 1, "", "calculate"]], "AFL.agent.Metric.Metric": [[11, 2, 1, "", "apply_constraints"], [11, 2, 1, "", "calculate"], [11, 2, 1, "", "copy"], [11, 2, 1, "", "normalize1"], [11, 2, 1, "", "normalize2"], [11, 2, 1, "", "to_dict"]], "AFL.agent.Metric.MultiMetric": [[11, 2, 1, "", "calculate"], [11, 2, 1, "", "prod"], [11, 2, 1, "", "sum"], [11, 2, 1, "", "to_dict"], [11, 2, 1, "", "update_name"]], "AFL.agent.Metric.Similarity": [[11, 2, 1, "", "calculate"]], "AFL.agent.PhaseLabeler": [[14, 1, 1, "", "AffinityPropagation"], [14, 1, 1, "", "DBSCAN"], [14, 1, 1, "", "GaussianMixtureModel"], [14, 1, 1, "", "KerasClassifier"], [14, 1, 1, "", "PhaseLabeler"], [14, 1, 1, "", "SpectralClustering"]], "AFL.agent.PhaseLabeler.AffinityPropagation": [[14, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.DBSCAN": [[14, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.GaussianMixtureModel": [[14, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.KerasClassifier": [[14, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.PhaseLabeler": [[14, 2, 1, "", "copy"], [14, 2, 1, "", "label"], [14, 2, 1, "", "remap_labels_by_count"], [14, 2, 1, "", "silhouette"]], "AFL.agent.PhaseLabeler.SpectralClustering": [[14, 2, 1, "", "label"]], "AFL.agent.PhaseMap_pandas": [[16, 1, 1, "", "PhaseMap"], [16, 1, 1, "", "PhaseMapModel"], [16, 1, 1, "", "PhaseMapView_MPL"], [16, 3, 1, "", "cart2ternary"], [16, 3, 1, "", "composition_grid"], [16, 3, 1, "", "format_plot_ternary"], [16, 3, 1, "", "phasemap_grid_factory"], [16, 3, 1, "", "rescale_compositions"], [16, 3, 1, "", "ternary2cart"]], "AFL.agent.PhaseMap_pandas.PhaseMap": [[16, 2, 1, "", "append"], [16, 4, 1, "", "components"], [16, 4, 1, "", "compositions"], [16, 2, 1, "", "copy"], [16, 4, 1, "", "label_encoder"], [16, 4, 1, "", "labels"], [16, 4, 1, "", "labels_ordinal"], [16, 2, 1, "", "load"], [16, 4, 1, "", "measurements"], [16, 4, 1, "", "ncomponents"], [16, 2, 1, "", "plot"], [16, 2, 1, "", "project"], [16, 2, 1, "", "save"], [16, 4, 1, "", "shape"], [16, 4, 1, "", "size"], [16, 2, 1, "", "slice"], [16, 2, 1, "", "update_encoder"]], "AFL.agent.PhaseMap_pandas.PhaseMapModel": [[16, 2, 1, "", "append"]], "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL": [[16, 2, 1, "", "lines"], [16, 2, 1, "", "make_axes"], [16, 2, 1, "", "scatter"], [16, 2, 1, "", "scatter_ternary"]], "AFL.agent.UCB_AcquisitionFunction": [[22, 1, 1, "", "Acquisition"], [22, 3, 1, "", "gauss2d"], [22, 3, 1, "", "get_next_sample_passthrough"], [22, 1, 1, "", "pseudoUCB"]], "AFL.agent.UCB_AcquisitionFunction.Acquisition": [[22, 2, 1, "", "add_exclusion"], [22, 2, 1, "", "copy"], [22, 2, 1, "", "execute"], [22, 2, 1, "", "get_next_sample"], [22, 2, 1, "", "plot"], [22, 2, 1, "", "reset_phasemap"]], "AFL.agent.UCB_AcquisitionFunction.pseudoUCB": [[22, 2, 1, "", "calculate_metric"]], "AFL.agent.reduce_usaxs": [[25, 3, 1, "", "amplifier_corrections"], [25, 3, 1, "", "calc_R_Q"], [25, 3, 1, "", "centroid"], [25, 3, 1, "", "reduce_uascan"], [25, 3, 1, "", "remove_masked_data"]], "AFL.agent.util": [[26, 3, 1, "", "composition_grid"], [26, 3, 1, "", "composition_grid_ternary"], [26, 3, 1, "", "mpl_format_ternary"], [26, 3, 1, "", "ternary_to_xy"]], "AFL.agent.xarray_extensions": [[28, 1, 1, "", "AFL_DataArrayTools"], [28, 1, 1, "", "AFL_DatasetTools"], [28, 1, 1, "", "CompositionTools"], [28, 1, 1, "", "LabelTools"], [28, 1, 1, "", "ScatteringTools"], [28, 1, 1, "", "Utilities"]], "AFL.agent.xarray_extensions.AFL_DatasetTools": [[28, 2, 1, "", "append"]], "AFL.agent.xarray_extensions.CompositionTools": [[28, 2, 1, "", "add_grid"], [28, 2, 1, "", "get"], [28, 2, 1, "", "get_grid"], [28, 2, 1, "", "get_grid_old"], [28, 2, 1, "", "get_range_scaled"], [28, 2, 1, "", "get_standard_scaled"], [28, 2, 1, "", "plot_3D"], [28, 2, 1, "", "plot_continuous"], [28, 2, 1, "", "plot_discrete"], [28, 2, 1, "", "plot_mask"], [28, 2, 1, "", "plot_scatter"], [28, 2, 1, "", "plot_surface"], [28, 2, 1, "", "ternary_to_xy"]], "AFL.agent.xarray_extensions.LabelTools": [[28, 2, 1, "", "make_default"], [28, 2, 1, "", "make_ordinal"]], "AFL.agent.xarray_extensions.ScatteringTools": [[28, 2, 1, "", "clean"], [28, 2, 1, "", "plot_linlin"], [28, 2, 1, "", "plot_loglog"], [28, 2, 1, "", "plot_logwaterfall"], [28, 2, 1, "", "plot_waterfall"]], "AFL.agent.xarray_extensions.Utilities": [[28, 2, 1, "", "preprocess_data"]], "AFL.double_agent": [[29, 0, 0, "-", "AcquisitionFunction"], [34, 0, 0, "-", "Boundary"], [35, 0, 0, "-", "Extrapolator"], [36, 0, 0, "-", "Generator"], [37, 0, 0, "-", "MaskGrid"], [38, 0, 0, "-", "PairMetric"], [39, 0, 0, "-", "PhaseLabeler"], [40, 0, 0, "-", "Pipeline"], [41, 0, 0, "-", "PipelineContext"], [42, 0, 0, "-", "PipelineOp"], [43, 0, 0, "-", "Preprocessor"], [46, 0, 0, "-", "plotting"], [47, 0, 0, "-", "util"], [48, 0, 0, "-", "xarray_extensions"]], "AFL.double_agent.AcquisitionFunction": [[29, 5, 1, "", "AcquisitionError"], [29, 1, 1, "", "AcquisitionFunction"], [29, 1, 1, "", "MaxValueAF"], [29, 1, 1, "", "MultimodalMask_MaxValueAF"], [29, 1, 1, "", "PseudoUCB"], [29, 1, 1, "", "RandomAF"]], "AFL.double_agent.AcquisitionFunction.AcquisitionFunction": [[29, 2, 1, "", "calculate"], [29, 2, 1, "", "exclude_previous_samples"], [29, 2, 1, "", "get_next_samples"]], "AFL.double_agent.AcquisitionFunction.MaxValueAF": [[29, 2, 1, "", "calculate"]], "AFL.double_agent.AcquisitionFunction.MultimodalMask_MaxValueAF": [[29, 2, 1, "", "calculate"]], "AFL.double_agent.AcquisitionFunction.PseudoUCB": [[29, 2, 1, "", "calculate"]], "AFL.double_agent.AcquisitionFunction.RandomAF": [[29, 2, 1, "", "calculate"]], "AFL.double_agent.Boundary": [[34, 1, 1, "", "BoundaryScore"], [34, 1, 1, "", "ConcaveHull"]], "AFL.double_agent.Boundary.BoundaryScore": [[34, 2, 1, "", "calculate"]], "AFL.double_agent.Boundary.ConcaveHull": [[34, 2, 1, "", "calculate"]], "AFL.double_agent.Extrapolator": [[35, 1, 1, "", "DummyExtrapolator"], [35, 1, 1, "", "Extrapolator"], [35, 1, 1, "", "GaussianProcessClassifier"], [35, 1, 1, "", "GaussianProcessRegressor"]], "AFL.double_agent.Extrapolator.DummyExtrapolator": [[35, 2, 1, "", "calculate"]], "AFL.double_agent.Extrapolator.Extrapolator": [[35, 2, 1, "", "calculate"], [35, 2, 1, "", "plot"]], "AFL.double_agent.Extrapolator.GaussianProcessClassifier": [[35, 2, 1, "", "calculate"]], "AFL.double_agent.Extrapolator.GaussianProcessRegressor": [[35, 2, 1, "", "calculate"]], "AFL.double_agent.Generator": [[36, 1, 1, "", "BarycentricGrid"], [36, 1, 1, "", "CartesianGrid"], [36, 1, 1, "", "GaussianPoints"], [36, 1, 1, "", "Generator"]], "AFL.double_agent.Generator.BarycentricGrid": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.Generator.CartesianGrid": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.Generator.GaussianPoints": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.Generator.Generator": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.MaskGrid": [[37, 1, 1, "", "MaskGrid"]], "AFL.double_agent.MaskGrid.MaskGrid": [[37, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric": [[38, 1, 1, "", "CombineMetric"], [38, 1, 1, "", "Delaunay"], [38, 1, 1, "", "Distance"], [38, 1, 1, "", "Dummy"], [38, 1, 1, "", "PairMetric"], [38, 1, 1, "", "Similarity"]], "AFL.double_agent.PairMetric.CombineMetric": [[38, 2, 1, "", "calculate"], [38, 2, 1, "", "prod"], [38, 2, 1, "", "sum"]], "AFL.double_agent.PairMetric.Delaunay": [[38, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric.Distance": [[38, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric.Dummy": [[38, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric.PairMetric": [[38, 2, 1, "", "apply_constraints"], [38, 2, 1, "", "calculate"], [38, 2, 1, "", "normalize1"], [38, 2, 1, "", "normalize2"]], "AFL.double_agent.PairMetric.Similarity": [[38, 2, 1, "", "calculate"]], "AFL.double_agent.PhaseLabeler": [[39, 1, 1, "", "AffinityPropagation"], [39, 1, 1, "", "GaussianMixtureModel"], [39, 1, 1, "", "PhaseLabeler"], [39, 1, 1, "", "SpectralClustering"]], "AFL.double_agent.PhaseLabeler.AffinityPropagation": [[39, 2, 1, "", "calculate"]], "AFL.double_agent.PhaseLabeler.GaussianMixtureModel": [[39, 2, 1, "", "calculate"]], "AFL.double_agent.PhaseLabeler.PhaseLabeler": [[39, 2, 1, "", "remap_labels_by_count"], [39, 2, 1, "", "silhouette"]], "AFL.double_agent.PhaseLabeler.SpectralClustering": [[39, 2, 1, "", "calculate"]], "AFL.double_agent.Pipeline": [[40, 1, 1, "", "Pipeline"]], "AFL.double_agent.Pipeline.Pipeline": [[40, 2, 1, "", "append"], [40, 2, 1, "", "calculate"], [40, 2, 1, "", "clear_outputs"], [40, 2, 1, "", "copy"], [40, 2, 1, "", "draw"], [40, 2, 1, "", "draw_plotly"], [40, 2, 1, "", "extend"], [40, 2, 1, "", "input_variables"], [40, 2, 1, "", "make_graph"], [40, 2, 1, "", "output_variables"], [40, 2, 1, "", "print"], [40, 2, 1, "", "print_code"], [40, 2, 1, "", "read"], [40, 2, 1, "", "search"], [40, 2, 1, "", "write"]], "AFL.double_agent.PipelineContext": [[41, 5, 1, "", "NoContextException"], [41, 1, 1, "", "PipelineContext"]], "AFL.double_agent.PipelineContext.PipelineContext": [[41, 6, 1, "", "contexts"], [41, 2, 1, "", "get_context"], [41, 2, 1, "", "get_contexts"]], "AFL.double_agent.PipelineOp": [[42, 1, 1, "", "PipelineOp"]], "AFL.double_agent.PipelineOp.PipelineOp": [[42, 2, 1, "", "add_to_dataset"], [42, 2, 1, "", "add_to_tiled"], [42, 2, 1, "", "calculate"], [42, 2, 1, "", "copy"], [42, 2, 1, "", "plot"]], "AFL.double_agent.Preprocessor": [[43, 1, 1, "", "ArrayToVars"], [43, 1, 1, "", "BarycentricToTernaryXY"], [43, 1, 1, "", "Destandardize"], [43, 1, 1, "", "Extrema"], [43, 1, 1, "", "Preprocessor"], [43, 1, 1, "", "SavgolFilter"], [43, 1, 1, "", "Standardize"], [43, 1, 1, "", "Subtract"], [43, 1, 1, "", "SubtractMin"], [43, 1, 1, "", "SympyTransform"], [43, 1, 1, "", "TernaryXYToBarycentric"], [43, 1, 1, "", "VarsToArray"], [43, 1, 1, "", "Zscale"], [43, 1, 1, "", "ZscaleError"]], "AFL.double_agent.Preprocessor.ArrayToVars": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.BarycentricToTernaryXY": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Destandardize": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Extrema": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Preprocessor": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.SavgolFilter": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Standardize": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Subtract": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.SubtractMin": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.SympyTransform": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.TernaryXYToBarycentric": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.VarsToArray": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Zscale": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.ZscaleError": [[43, 2, 1, "", "calculate"]], "AFL.double_agent.plotting": [[46, 3, 1, "", "plot_scatter_mpl"], [46, 3, 1, "", "plot_surface_mpl"]], "AFL.double_agent.util": [[47, 3, 1, "", "extract_parameters"], [47, 3, 1, "", "listify"]], "AFL.double_agent.xarray_extensions": [[48, 1, 1, "", "AFL_DataArrayTools"], [48, 1, 1, "", "AFL_DatasetTools"], [48, 1, 1, "", "CompositionTools"], [48, 1, 1, "", "LabelTools"], [48, 1, 1, "", "ScatteringTools"], [48, 1, 1, "", "Utilities"]], "AFL.double_agent.xarray_extensions.AFL_DatasetTools": [[48, 2, 1, "", "append"]], "AFL.double_agent.xarray_extensions.CompositionTools": [[48, 2, 1, "", "add_grid"], [48, 2, 1, "", "get"], [48, 2, 1, "", "get_grid"], [48, 2, 1, "", "get_grid_old"], [48, 2, 1, "", "get_range_scaled"], [48, 2, 1, "", "get_standard_scaled"], [48, 2, 1, "", "plot_3D"], [48, 2, 1, "", "plot_mask"], [48, 2, 1, "", "plot_scatter"], [48, 2, 1, "", "plot_surface"], [48, 2, 1, "", "ternary_to_xy"]], "AFL.double_agent.xarray_extensions.LabelTools": [[48, 2, 1, "", "make_default"], [48, 2, 1, "", "make_ordinal"]], "AFL.double_agent.xarray_extensions.ScatteringTools": [[48, 2, 1, "", "clean"], [48, 2, 1, "", "plot_linlin"], [48, 2, 1, "", "plot_loglog"], [48, 2, 1, "", "plot_logwaterfall"], [48, 2, 1, "", "plot_waterfall"]], "AFL.double_agent.xarray_extensions.Utilities": [[48, 2, 1, "", "preprocess_data"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:exception", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"explan": 0, "append": 1, "data": [1, 24, 50], "xarrai": [1, 2], "dataset": [1, 2], "build": [2, 50], "from": [2, 53], "scratch": 2, "how": 3, "To": 3, "guid": 3, "afl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "agent": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 49], "kei": 4, "featur": 4, "instal": [4, 53], "citat": 4, "content": 4, "acquisitionfunct": [5, 29], "modul": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48], "agentcli": [6, 30], "dowshampoo_sampledriv": 7, "ei_acquisitionfunct": 8, "gaussianprocess": 9, "hscedgaussianprocess": 10, "metric": 11, "multimodal_al_sampledriv": 12, "multimodal_agentdriv": 13, "phaselabel": [14, 39], "phasemap": 15, "phasemap_panda": 16, "sans_al_sampledriv": 17, "sas_al_sampledriv": 18, "sas_agentdriv": 19, "sas_grid_al_sampledriv": 20, "saxs_al_sampledriv": 21, "ucb_acquisitionfunct": 22, "watchdog": 23, "packag": 24, "core": [24, 45], "compon": [24, 45], "driver": [24, 45], "autom": 24, "process": [24, 50], "reduce_usax": 25, "util": [26, 45, 47], "vsas_nodeck_al_sampledriv": 27, "xarray_extens": [28, 48], "double_ag": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], "agentdriv": 31, "autosa": 32, "autosas_driv": 33, "boundari": 34, "extrapol": 35, "gener": 36, "maskgrid": 37, "pairmetr": 38, "pipelin": [40, 45, 50], "usag": 40, "pipelinecontext": 41, "pipelineop": 42, "preprocessor": 43, "step": [43, 50, 51], "tensorflowextrapol": 44, "api": [45, 49], "oper": 45, "apiserv": 45, "plot": 46, "refer": 49, "doubl": 49, "input": 50, "1": 50, "savitzki": 50, "golai": 50, "filter": 50, "2": 50, "similar": 50, "3": 50, "spectral": 50, "cluster": 50, "4": 50, "gaussian": 50, "classifi": 50, "5": 50, "acquisit": 50, "function": 50, "full": 50, "quick": 51, "start": 51, "exampl": 51, "understand": 51, "next": 51, "tutori": 52, "setup": 53, "prerequisit": 53, "basic": 53, "develop": 53, "option": 53, "depend": 53, "specif": 53, "branch": 53, "offlin": 53, "troubleshoot": 53}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"Explanations": [[0, "explanations"]], "Appending Data to xarray.Datasets": [[1, "appending-data-to-xarray-datasets"]], "Building xarray.Datasets from Scratch": [[2, "building-xarray-datasets-from-scratch"]], "How-To Guides": [[3, "how-to-guides"]], "AFL-agent": [[4, "afl-agent"]], "Key Features": [[4, "key-features"]], "Installation": [[4, "installation"]], "Citation": [[4, "citation"]], "Contents": [[4, "contents"]], "Contents:": [[4, null]], "AFL.agent.AcquisitionFunction module": [[5, "module-AFL.agent.AcquisitionFunction"]], "AFL.agent.AgentClient module": [[6, "afl-agent-agentclient-module"]], "AFL.agent.DowShampoo_SampleDriver module": [[7, "afl-agent-dowshampoo-sampledriver-module"]], "AFL.agent.EI_AcquisitionFunction module": [[8, "module-AFL.agent.EI_AcquisitionFunction"]], "AFL.agent.GaussianProcess module": [[9, "afl-agent-gaussianprocess-module"]], "AFL.agent.HscedGaussianProcess module": [[10, "afl-agent-hscedgaussianprocess-module"]], "AFL.agent.Metric module": [[11, "module-AFL.agent.Metric"]], "AFL.agent.Multimodal_AL_SampleDriver module": [[12, "afl-agent-multimodal-al-sampledriver-module"]], "AFL.agent.Multimodal_AgentDriver module": [[13, "afl-agent-multimodal-agentdriver-module"]], "AFL.agent.PhaseLabeler module": [[14, "module-AFL.agent.PhaseLabeler"]], "AFL.agent.PhaseMap module": [[15, "module-AFL.agent.PhaseMap"]], "AFL.agent.PhaseMap_pandas module": [[16, "module-AFL.agent.PhaseMap_pandas"]], "AFL.agent.SANS_AL_SampleDriver module": [[17, "afl-agent-sans-al-sampledriver-module"]], "AFL.agent.SAS_AL_SampleDriver module": [[18, "afl-agent-sas-al-sampledriver-module"]], "AFL.agent.SAS_AgentDriver module": [[19, "afl-agent-sas-agentdriver-module"]], "AFL.agent.SAS_Grid_AL_SampleDriver module": [[20, "afl-agent-sas-grid-al-sampledriver-module"]], "AFL.agent.SAXS_AL_SampleDriver module": [[21, "afl-agent-saxs-al-sampledriver-module"]], "AFL.agent.UCB_AcquisitionFunction module": [[22, "module-AFL.agent.UCB_AcquisitionFunction"]], "AFL.agent.WatchDog module": [[23, "afl-agent-watchdog-module"]], "AFL.agent package": [[24, "afl-agent-package"]], "Core Components": [[24, "core-components"], [45, "core-components"]], "Drivers and Automation": [[24, "drivers-and-automation"]], "Data Processing": [[24, "data-processing"]], "AFL.agent.reduce_usaxs module": [[25, "module-AFL.agent.reduce_usaxs"]], "AFL.agent.util module": [[26, "module-AFL.agent.util"]], "AFL.agent.vSAS_NoDeck_AL_SampleDriver module": [[27, "afl-agent-vsas-nodeck-al-sampledriver-module"]], "AFL.agent.xarray_extensions module": [[28, "module-AFL.agent.xarray_extensions"]], "AFL.double_agent.AcquisitionFunction module": [[29, "module-AFL.double_agent.AcquisitionFunction"]], "AFL.double_agent.AgentClient module": [[30, "afl-double-agent-agentclient-module"]], "AFL.double_agent.AgentDriver module": [[31, "afl-double-agent-agentdriver-module"]], "AFL.double_agent.AutoSAS module": [[32, "afl-double-agent-autosas-module"]], "AFL.double_agent.AutoSAS_Driver module": [[33, "afl-double-agent-autosas-driver-module"]], "AFL.double_agent.Boundary module": [[34, "module-AFL.double_agent.Boundary"]], "AFL.double_agent.Extrapolator module": [[35, "module-AFL.double_agent.Extrapolator"]], "AFL.double_agent.Generator module": [[36, "module-AFL.double_agent.Generator"]], "AFL.double_agent.MaskGrid module": [[37, "module-AFL.double_agent.MaskGrid"]], "AFL.double_agent.PairMetric module": [[38, "module-AFL.double_agent.PairMetric"]], "AFL.double_agent.PhaseLabeler module": [[39, "module-AFL.double_agent.PhaseLabeler"]], "AFL.double_agent.Pipeline module": [[40, "module-AFL.double_agent.Pipeline"]], "Usage": [[40, "usage"]], "AFL.double_agent.PipelineContext module": [[41, "module-AFL.double_agent.PipelineContext"]], "AFL.double_agent.PipelineOp module": [[42, "module-AFL.double_agent.PipelineOp"]], "AFL.double_agent.Preprocessor module": [[43, "module-AFL.double_agent.Preprocessor"]], "Steps": [[43, "steps"]], "AFL.double_agent.TensorFlowExtrapolator module": [[44, "afl-double-agent-tensorflowextrapolator-module"]], "AFL.double_agent API": [[45, "afl-double-agent-api"]], "Pipeline Operations": [[45, "pipeline-operations"]], "Utilities": [[45, "utilities"]], "APIServer Drivers": [[45, "apiserver-drivers"]], "AFL.double_agent.plotting module": [[46, "module-AFL.double_agent.plotting"]], "AFL.double_agent.util module": [[47, "module-AFL.double_agent.util"]], "AFL.double_agent.xarray_extensions module": [[48, "module-AFL.double_agent.xarray_extensions"]], "Reference": [[49, "reference"]], "Double Agent API": [[49, "double-agent-api"]], "Agent API": [[49, "agent-api"]], "Building Pipelines": [[50, "building-pipelines"]], "Input Data": [[50, "input-data"]], "Pipeline Step 1: Savitzky-Golay Filter": [[50, "pipeline-step-1-savitzky-golay-filter"]], "Pipeline Step 2: Similarity": [[50, "pipeline-step-2-similarity"]], "Pipeline Step 3: Spectral Clustering": [[50, "pipeline-step-3-spectral-clustering"]], "Pipeline Step 4: Gaussian Process Classifier": [[50, "pipeline-step-4-gaussian-process-classifier"]], "Pipeline Step 5: Acquisition Function": [[50, "pipeline-step-5-acquisition-function"]], "Full Pipeline": [[50, "full-pipeline"]], "Quick Start Example": [[51, "quick-start-example"]], "Understanding the Example": [[51, "understanding-the-example"]], "Next Steps": [[51, "next-steps"]], "Tutorials": [[52, "tutorials"]], "Setup": [[53, "setup"]], "Prerequisites": [[53, "prerequisites"]], "Basic Installation": [[53, "basic-installation"]], "Development Installation": [[53, "development-installation"]], "Optional Dependencies": [[53, "optional-dependencies"]], "Installation from a Specific Branch": [[53, "installation-from-a-specific-branch"]], "Offline Installation": [[53, "offline-installation"]], "Troubleshooting": [[53, "troubleshooting"]]}, "indexentries": {"afl.agent.acquisitionfunction": [[5, "module-AFL.agent.AcquisitionFunction"]], "acquisition (class in afl.agent.acquisitionfunction)": [[5, "AFL.agent.AcquisitionFunction.Acquisition"]], "iterationcombined (class in afl.agent.acquisitionfunction)": [[5, "AFL.agent.AcquisitionFunction.IterationCombined"]], "lowestdensity (class in afl.agent.acquisitionfunction)": [[5, "AFL.agent.AcquisitionFunction.LowestDensity"]], "random (class in afl.agent.acquisitionfunction)": [[5, "AFL.agent.AcquisitionFunction.Random"]], "variance (class in afl.agent.acquisitionfunction)": [[5, "AFL.agent.AcquisitionFunction.Variance"]], "add_exclusion() (afl.agent.acquisitionfunction.acquisition method)": [[5, "AFL.agent.AcquisitionFunction.Acquisition.add_exclusion"]], "calculate_metric() (afl.agent.acquisitionfunction.iterationcombined method)": [[5, "AFL.agent.AcquisitionFunction.IterationCombined.calculate_metric"]], "calculate_metric() (afl.agent.acquisitionfunction.lowestdensity method)": [[5, "AFL.agent.AcquisitionFunction.LowestDensity.calculate_metric"]], "calculate_metric() (afl.agent.acquisitionfunction.random method)": [[5, "AFL.agent.AcquisitionFunction.Random.calculate_metric"]], "calculate_metric() (afl.agent.acquisitionfunction.variance method)": [[5, "AFL.agent.AcquisitionFunction.Variance.calculate_metric"]], "copy() (afl.agent.acquisitionfunction.acquisition method)": [[5, "AFL.agent.AcquisitionFunction.Acquisition.copy"]], "execute() (afl.agent.acquisitionfunction.acquisition method)": [[5, "AFL.agent.AcquisitionFunction.Acquisition.execute"]], "gauss2d() (in module afl.agent.acquisitionfunction)": [[5, "AFL.agent.AcquisitionFunction.gauss2d"]], "get_next_sample() (afl.agent.acquisitionfunction.acquisition method)": [[5, "AFL.agent.AcquisitionFunction.Acquisition.get_next_sample"]], "module": [[5, "module-AFL.agent.AcquisitionFunction"], [8, "module-AFL.agent.EI_AcquisitionFunction"], [11, "module-AFL.agent.Metric"], [14, "module-AFL.agent.PhaseLabeler"], [15, "module-AFL.agent.PhaseMap"], [16, "module-AFL.agent.PhaseMap_pandas"], [22, "module-AFL.agent.UCB_AcquisitionFunction"], [25, "module-AFL.agent.reduce_usaxs"], [26, "module-AFL.agent.util"], [28, "module-AFL.agent.xarray_extensions"], [29, "module-AFL.double_agent.AcquisitionFunction"], [34, "module-AFL.double_agent.Boundary"], [35, "module-AFL.double_agent.Extrapolator"], [36, "module-AFL.double_agent.Generator"], [37, "module-AFL.double_agent.MaskGrid"], [38, "module-AFL.double_agent.PairMetric"], [39, "module-AFL.double_agent.PhaseLabeler"], [40, "module-AFL.double_agent.Pipeline"], [41, "module-AFL.double_agent.PipelineContext"], [42, "module-AFL.double_agent.PipelineOp"], [43, "module-AFL.double_agent.Preprocessor"], [46, "module-AFL.double_agent.plotting"], [47, "module-AFL.double_agent.util"], [48, "module-AFL.double_agent.xarray_extensions"]], "plot() (afl.agent.acquisitionfunction.acquisition method)": [[5, "AFL.agent.AcquisitionFunction.Acquisition.plot"]], "reset_phasemap() (afl.agent.acquisitionfunction.acquisition method)": [[5, "AFL.agent.AcquisitionFunction.Acquisition.reset_phasemap"]], "reset_phasemap() (afl.agent.acquisitionfunction.iterationcombined method)": [[5, "AFL.agent.AcquisitionFunction.IterationCombined.reset_phasemap"]], "afl.agent.ei_acquisitionfunction": [[8, "module-AFL.agent.EI_AcquisitionFunction"]], "acquisition (class in afl.agent.ei_acquisitionfunction)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition"]], "ei (class in afl.agent.ei_acquisitionfunction)": [[8, "AFL.agent.EI_AcquisitionFunction.EI"]], "add_exclusion() (afl.agent.ei_acquisitionfunction.acquisition method)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition.add_exclusion"]], "calculate_metric() (afl.agent.ei_acquisitionfunction.ei method)": [[8, "AFL.agent.EI_AcquisitionFunction.EI.calculate_metric"]], "calculate_metric() (afl.agent.ei_acquisitionfunction.pseudoei method)": [[8, "AFL.agent.EI_AcquisitionFunction.pseudoEI.calculate_metric"]], "copy() (afl.agent.ei_acquisitionfunction.acquisition method)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition.copy"]], "execute() (afl.agent.ei_acquisitionfunction.acquisition method)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition.execute"]], "gauss2d() (in module afl.agent.ei_acquisitionfunction)": [[8, "AFL.agent.EI_AcquisitionFunction.gauss2d"]], "get_next_sample() (afl.agent.ei_acquisitionfunction.acquisition method)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition.get_next_sample"]], "plot() (afl.agent.ei_acquisitionfunction.acquisition method)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition.plot"]], "pseudoei (class in afl.agent.ei_acquisitionfunction)": [[8, "AFL.agent.EI_AcquisitionFunction.pseudoEI"]], "reset_phasemap() (afl.agent.ei_acquisitionfunction.acquisition method)": [[8, "AFL.agent.EI_AcquisitionFunction.Acquisition.reset_phasemap"]], "afl.agent.metric": [[11, "module-AFL.agent.Metric"]], "delaunay (class in afl.agent.metric)": [[11, "AFL.agent.Metric.Delaunay"]], "distance (class in afl.agent.metric)": [[11, "AFL.agent.Metric.Distance"]], "dummy (class in afl.agent.metric)": [[11, "AFL.agent.Metric.Dummy"]], "metric (class in afl.agent.metric)": [[11, "AFL.agent.Metric.Metric"]], "multimetric (class in afl.agent.metric)": [[11, "AFL.agent.Metric.MultiMetric"]], "similarity (class in afl.agent.metric)": [[11, "AFL.agent.Metric.Similarity"]], "apply_constraints() (afl.agent.metric.metric method)": [[11, "AFL.agent.Metric.Metric.apply_constraints"]], "calculate() (afl.agent.metric.delaunay method)": [[11, "AFL.agent.Metric.Delaunay.calculate"]], "calculate() (afl.agent.metric.distance method)": [[11, "AFL.agent.Metric.Distance.calculate"]], "calculate() (afl.agent.metric.dummy method)": [[11, "AFL.agent.Metric.Dummy.calculate"]], "calculate() (afl.agent.metric.metric method)": [[11, "AFL.agent.Metric.Metric.calculate"]], "calculate() (afl.agent.metric.multimetric method)": [[11, "AFL.agent.Metric.MultiMetric.calculate"]], "calculate() (afl.agent.metric.similarity method)": [[11, "AFL.agent.Metric.Similarity.calculate"]], "copy() (afl.agent.metric.metric method)": [[11, "AFL.agent.Metric.Metric.copy"]], "listify() (in module afl.agent.metric)": [[11, "AFL.agent.Metric.listify"]], "normalize1() (afl.agent.metric.metric method)": [[11, "AFL.agent.Metric.Metric.normalize1"]], "normalize2() (afl.agent.metric.metric method)": [[11, "AFL.agent.Metric.Metric.normalize2"]], "prod() (afl.agent.metric.multimetric method)": [[11, "AFL.agent.Metric.MultiMetric.prod"]], "sum() (afl.agent.metric.multimetric method)": [[11, "AFL.agent.Metric.MultiMetric.sum"]], "to_dict() (afl.agent.metric.metric method)": [[11, "AFL.agent.Metric.Metric.to_dict"]], "to_dict() (afl.agent.metric.multimetric method)": [[11, "AFL.agent.Metric.MultiMetric.to_dict"]], "update_name() (afl.agent.metric.multimetric method)": [[11, "AFL.agent.Metric.MultiMetric.update_name"]], "afl.agent.phaselabeler": [[14, "module-AFL.agent.PhaseLabeler"]], "affinitypropagation (class in afl.agent.phaselabeler)": [[14, "AFL.agent.PhaseLabeler.AffinityPropagation"]], "dbscan (class in afl.agent.phaselabeler)": [[14, "AFL.agent.PhaseLabeler.DBSCAN"]], "gaussianmixturemodel (class in afl.agent.phaselabeler)": [[14, "AFL.agent.PhaseLabeler.GaussianMixtureModel"]], "kerasclassifier (class in afl.agent.phaselabeler)": [[14, "AFL.agent.PhaseLabeler.KerasClassifier"]], "phaselabeler (class in afl.agent.phaselabeler)": [[14, "AFL.agent.PhaseLabeler.PhaseLabeler"]], "spectralclustering (class in afl.agent.phaselabeler)": [[14, "AFL.agent.PhaseLabeler.SpectralClustering"]], "copy() (afl.agent.phaselabeler.phaselabeler method)": [[14, "AFL.agent.PhaseLabeler.PhaseLabeler.copy"]], "label() (afl.agent.phaselabeler.affinitypropagation method)": [[14, "AFL.agent.PhaseLabeler.AffinityPropagation.label"]], "label() (afl.agent.phaselabeler.dbscan method)": [[14, "AFL.agent.PhaseLabeler.DBSCAN.label"]], "label() (afl.agent.phaselabeler.gaussianmixturemodel method)": [[14, "AFL.agent.PhaseLabeler.GaussianMixtureModel.label"]], "label() (afl.agent.phaselabeler.kerasclassifier method)": [[14, "AFL.agent.PhaseLabeler.KerasClassifier.label"]], "label() (afl.agent.phaselabeler.phaselabeler method)": [[14, "AFL.agent.PhaseLabeler.PhaseLabeler.label"]], "label() (afl.agent.phaselabeler.spectralclustering method)": [[14, "AFL.agent.PhaseLabeler.SpectralClustering.label"]], "remap_labels_by_count() (afl.agent.phaselabeler.phaselabeler method)": [[14, "AFL.agent.PhaseLabeler.PhaseLabeler.remap_labels_by_count"]], "silhouette() (afl.agent.phaselabeler.phaselabeler method)": [[14, "AFL.agent.PhaseLabeler.PhaseLabeler.silhouette"]], "afl.agent.phasemap": [[15, "module-AFL.agent.PhaseMap"]], "afl.agent.phasemap_pandas": [[16, "module-AFL.agent.PhaseMap_pandas"]], "phasemap (class in afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap"]], "phasemapmodel (class in afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapModel"]], "phasemapview_mpl (class in afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL"]], "append() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.append"]], "append() (afl.agent.phasemap_pandas.phasemapmodel method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapModel.append"]], "cart2ternary() (in module afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.cart2ternary"]], "components (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.components"]], "composition_grid() (in module afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.composition_grid"]], "compositions (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.compositions"]], "copy() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.copy"]], "format_plot_ternary() (in module afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.format_plot_ternary"]], "label_encoder (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.label_encoder"]], "labels (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.labels"]], "labels_ordinal (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.labels_ordinal"]], "lines() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.lines"]], "load() (afl.agent.phasemap_pandas.phasemap class method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.load"]], "make_axes() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.make_axes"]], "measurements (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.measurements"]], "ncomponents (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.ncomponents"]], "phasemap_grid_factory() (in module afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.phasemap_grid_factory"]], "plot() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.plot"]], "project() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.project"]], "rescale_compositions() (in module afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.rescale_compositions"]], "save() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.save"]], "scatter() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.scatter"]], "scatter_ternary() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.scatter_ternary"]], "shape (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.shape"]], "size (afl.agent.phasemap_pandas.phasemap property)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.size"]], "slice() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.slice"]], "ternary2cart() (in module afl.agent.phasemap_pandas)": [[16, "AFL.agent.PhaseMap_pandas.ternary2cart"]], "update_encoder() (afl.agent.phasemap_pandas.phasemap method)": [[16, "AFL.agent.PhaseMap_pandas.PhaseMap.update_encoder"]], "afl.agent.ucb_acquisitionfunction": [[22, "module-AFL.agent.UCB_AcquisitionFunction"]], "acquisition (class in afl.agent.ucb_acquisitionfunction)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition"]], "add_exclusion() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition.add_exclusion"]], "calculate_metric() (afl.agent.ucb_acquisitionfunction.pseudoucb method)": [[22, "AFL.agent.UCB_AcquisitionFunction.pseudoUCB.calculate_metric"]], "copy() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition.copy"]], "execute() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition.execute"]], "gauss2d() (in module afl.agent.ucb_acquisitionfunction)": [[22, "AFL.agent.UCB_AcquisitionFunction.gauss2d"]], "get_next_sample() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition.get_next_sample"]], "get_next_sample_passthrough() (in module afl.agent.ucb_acquisitionfunction)": [[22, "AFL.agent.UCB_AcquisitionFunction.get_next_sample_passthrough"]], "plot() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition.plot"]], "pseudoucb (class in afl.agent.ucb_acquisitionfunction)": [[22, "AFL.agent.UCB_AcquisitionFunction.pseudoUCB"]], "reset_phasemap() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[22, "AFL.agent.UCB_AcquisitionFunction.Acquisition.reset_phasemap"]], "afl.agent.reduce_usaxs": [[25, "module-AFL.agent.reduce_usaxs"]], "amplifier_corrections() (in module afl.agent.reduce_usaxs)": [[25, "AFL.agent.reduce_usaxs.amplifier_corrections"]], "calc_r_q() (in module afl.agent.reduce_usaxs)": [[25, "AFL.agent.reduce_usaxs.calc_R_Q"]], "centroid() (in module afl.agent.reduce_usaxs)": [[25, "AFL.agent.reduce_usaxs.centroid"]], "reduce_uascan() (in module afl.agent.reduce_usaxs)": [[25, "AFL.agent.reduce_usaxs.reduce_uascan"]], "remove_masked_data() (in module afl.agent.reduce_usaxs)": [[25, "AFL.agent.reduce_usaxs.remove_masked_data"]], "afl.agent.util": [[26, "module-AFL.agent.util"]], "composition_grid() (in module afl.agent.util)": [[26, "AFL.agent.util.composition_grid"]], "composition_grid_ternary() (in module afl.agent.util)": [[26, "AFL.agent.util.composition_grid_ternary"]], "mpl_format_ternary() (in module afl.agent.util)": [[26, "AFL.agent.util.mpl_format_ternary"]], "ternary_to_xy() (in module afl.agent.util)": [[26, "AFL.agent.util.ternary_to_xy"]], "afl.agent.xarray_extensions": [[28, "module-AFL.agent.xarray_extensions"]], "afl_dataarraytools (class in afl.agent.xarray_extensions)": [[28, "AFL.agent.xarray_extensions.AFL_DataArrayTools"]], "afl_datasettools (class in afl.agent.xarray_extensions)": [[28, "AFL.agent.xarray_extensions.AFL_DatasetTools"]], "compositiontools (class in afl.agent.xarray_extensions)": [[28, "AFL.agent.xarray_extensions.CompositionTools"]], "labeltools (class in afl.agent.xarray_extensions)": [[28, "AFL.agent.xarray_extensions.LabelTools"]], "scatteringtools (class in afl.agent.xarray_extensions)": [[28, "AFL.agent.xarray_extensions.ScatteringTools"]], "utilities (class in afl.agent.xarray_extensions)": [[28, "AFL.agent.xarray_extensions.Utilities"]], "add_grid() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.add_grid"]], "append() (afl.agent.xarray_extensions.afl_datasettools method)": [[28, "AFL.agent.xarray_extensions.AFL_DatasetTools.append"]], "clean() (afl.agent.xarray_extensions.scatteringtools method)": [[28, "AFL.agent.xarray_extensions.ScatteringTools.clean"]], "get() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.get"]], "get_grid() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.get_grid"]], "get_grid_old() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.get_grid_old"]], "get_range_scaled() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.get_range_scaled"]], "get_standard_scaled() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.get_standard_scaled"]], "make_default() (afl.agent.xarray_extensions.labeltools method)": [[28, "AFL.agent.xarray_extensions.LabelTools.make_default"]], "make_ordinal() (afl.agent.xarray_extensions.labeltools method)": [[28, "AFL.agent.xarray_extensions.LabelTools.make_ordinal"]], "plot_3d() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.plot_3D"]], "plot_continuous() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.plot_continuous"]], "plot_discrete() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.plot_discrete"]], "plot_linlin() (afl.agent.xarray_extensions.scatteringtools method)": [[28, "AFL.agent.xarray_extensions.ScatteringTools.plot_linlin"]], "plot_loglog() (afl.agent.xarray_extensions.scatteringtools method)": [[28, "AFL.agent.xarray_extensions.ScatteringTools.plot_loglog"]], "plot_logwaterfall() (afl.agent.xarray_extensions.scatteringtools method)": [[28, "AFL.agent.xarray_extensions.ScatteringTools.plot_logwaterfall"]], "plot_mask() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.plot_mask"]], "plot_scatter() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.plot_scatter"]], "plot_surface() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.plot_surface"]], "plot_waterfall() (afl.agent.xarray_extensions.scatteringtools method)": [[28, "AFL.agent.xarray_extensions.ScatteringTools.plot_waterfall"]], "preprocess_data() (afl.agent.xarray_extensions.utilities method)": [[28, "AFL.agent.xarray_extensions.Utilities.preprocess_data"]], "ternary_to_xy() (afl.agent.xarray_extensions.compositiontools method)": [[28, "AFL.agent.xarray_extensions.CompositionTools.ternary_to_xy"]], "afl.double_agent.acquisitionfunction": [[29, "module-AFL.double_agent.AcquisitionFunction"]], "acquisitionerror": [[29, "AFL.double_agent.AcquisitionFunction.AcquisitionError"]], "acquisitionfunction (class in afl.double_agent.acquisitionfunction)": [[29, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction"]], "maxvalueaf (class in afl.double_agent.acquisitionfunction)": [[29, "AFL.double_agent.AcquisitionFunction.MaxValueAF"]], "multimodalmask_maxvalueaf (class in afl.double_agent.acquisitionfunction)": [[29, "AFL.double_agent.AcquisitionFunction.MultimodalMask_MaxValueAF"]], "pseudoucb (class in afl.double_agent.acquisitionfunction)": [[29, "AFL.double_agent.AcquisitionFunction.PseudoUCB"]], "randomaf (class in afl.double_agent.acquisitionfunction)": [[29, "AFL.double_agent.AcquisitionFunction.RandomAF"]], "calculate() (afl.double_agent.acquisitionfunction.acquisitionfunction method)": [[29, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.maxvalueaf method)": [[29, "AFL.double_agent.AcquisitionFunction.MaxValueAF.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.multimodalmask_maxvalueaf method)": [[29, "AFL.double_agent.AcquisitionFunction.MultimodalMask_MaxValueAF.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.pseudoucb method)": [[29, "AFL.double_agent.AcquisitionFunction.PseudoUCB.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.randomaf method)": [[29, "AFL.double_agent.AcquisitionFunction.RandomAF.calculate"]], "exclude_previous_samples() (afl.double_agent.acquisitionfunction.acquisitionfunction method)": [[29, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction.exclude_previous_samples"]], "get_next_samples() (afl.double_agent.acquisitionfunction.acquisitionfunction method)": [[29, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction.get_next_samples"]], "afl.double_agent.boundary": [[34, "module-AFL.double_agent.Boundary"]], "boundaryscore (class in afl.double_agent.boundary)": [[34, "AFL.double_agent.Boundary.BoundaryScore"]], "concavehull (class in afl.double_agent.boundary)": [[34, "AFL.double_agent.Boundary.ConcaveHull"]], "calculate() (afl.double_agent.boundary.boundaryscore method)": [[34, "AFL.double_agent.Boundary.BoundaryScore.calculate"]], "calculate() (afl.double_agent.boundary.concavehull method)": [[34, "AFL.double_agent.Boundary.ConcaveHull.calculate"]], "afl.double_agent.extrapolator": [[35, "module-AFL.double_agent.Extrapolator"]], "dummyextrapolator (class in afl.double_agent.extrapolator)": [[35, "AFL.double_agent.Extrapolator.DummyExtrapolator"]], "extrapolator (class in afl.double_agent.extrapolator)": [[35, "AFL.double_agent.Extrapolator.Extrapolator"]], "gaussianprocessclassifier (class in afl.double_agent.extrapolator)": [[35, "AFL.double_agent.Extrapolator.GaussianProcessClassifier"]], "gaussianprocessregressor (class in afl.double_agent.extrapolator)": [[35, "AFL.double_agent.Extrapolator.GaussianProcessRegressor"]], "calculate() (afl.double_agent.extrapolator.dummyextrapolator method)": [[35, "AFL.double_agent.Extrapolator.DummyExtrapolator.calculate"]], "calculate() (afl.double_agent.extrapolator.extrapolator method)": [[35, "AFL.double_agent.Extrapolator.Extrapolator.calculate"]], "calculate() (afl.double_agent.extrapolator.gaussianprocessclassifier method)": [[35, "AFL.double_agent.Extrapolator.GaussianProcessClassifier.calculate"]], "calculate() (afl.double_agent.extrapolator.gaussianprocessregressor method)": [[35, "AFL.double_agent.Extrapolator.GaussianProcessRegressor.calculate"]], "plot() (afl.double_agent.extrapolator.extrapolator method)": [[35, "AFL.double_agent.Extrapolator.Extrapolator.plot"]], "afl.double_agent.generator": [[36, "module-AFL.double_agent.Generator"]], "barycentricgrid (class in afl.double_agent.generator)": [[36, "AFL.double_agent.Generator.BarycentricGrid"]], "cartesiangrid (class in afl.double_agent.generator)": [[36, "AFL.double_agent.Generator.CartesianGrid"]], "gaussianpoints (class in afl.double_agent.generator)": [[36, "AFL.double_agent.Generator.GaussianPoints"]], "generator (class in afl.double_agent.generator)": [[36, "AFL.double_agent.Generator.Generator"]], "calculate() (afl.double_agent.generator.barycentricgrid method)": [[36, "AFL.double_agent.Generator.BarycentricGrid.calculate"]], "calculate() (afl.double_agent.generator.cartesiangrid method)": [[36, "AFL.double_agent.Generator.CartesianGrid.calculate"]], "calculate() (afl.double_agent.generator.gaussianpoints method)": [[36, "AFL.double_agent.Generator.GaussianPoints.calculate"]], "calculate() (afl.double_agent.generator.generator method)": [[36, "AFL.double_agent.Generator.Generator.calculate"]], "afl.double_agent.maskgrid": [[37, "module-AFL.double_agent.MaskGrid"]], "maskgrid (class in afl.double_agent.maskgrid)": [[37, "AFL.double_agent.MaskGrid.MaskGrid"]], "calculate() (afl.double_agent.maskgrid.maskgrid method)": [[37, "AFL.double_agent.MaskGrid.MaskGrid.calculate"]], "afl.double_agent.pairmetric": [[38, "module-AFL.double_agent.PairMetric"]], "combinemetric (class in afl.double_agent.pairmetric)": [[38, "AFL.double_agent.PairMetric.CombineMetric"]], "delaunay (class in afl.double_agent.pairmetric)": [[38, "AFL.double_agent.PairMetric.Delaunay"]], "distance (class in afl.double_agent.pairmetric)": [[38, "AFL.double_agent.PairMetric.Distance"]], "dummy (class in afl.double_agent.pairmetric)": [[38, "AFL.double_agent.PairMetric.Dummy"]], "pairmetric (class in afl.double_agent.pairmetric)": [[38, "AFL.double_agent.PairMetric.PairMetric"]], "similarity (class in afl.double_agent.pairmetric)": [[38, "AFL.double_agent.PairMetric.Similarity"]], "apply_constraints() (afl.double_agent.pairmetric.pairmetric method)": [[38, "AFL.double_agent.PairMetric.PairMetric.apply_constraints"]], "calculate() (afl.double_agent.pairmetric.combinemetric method)": [[38, "AFL.double_agent.PairMetric.CombineMetric.calculate"]], "calculate() (afl.double_agent.pairmetric.delaunay method)": [[38, "AFL.double_agent.PairMetric.Delaunay.calculate"]], "calculate() (afl.double_agent.pairmetric.distance method)": [[38, "AFL.double_agent.PairMetric.Distance.calculate"]], "calculate() (afl.double_agent.pairmetric.dummy method)": [[38, "AFL.double_agent.PairMetric.Dummy.calculate"]], "calculate() (afl.double_agent.pairmetric.pairmetric method)": [[38, "AFL.double_agent.PairMetric.PairMetric.calculate"]], "calculate() (afl.double_agent.pairmetric.similarity method)": [[38, "AFL.double_agent.PairMetric.Similarity.calculate"]], "normalize1() (afl.double_agent.pairmetric.pairmetric method)": [[38, "AFL.double_agent.PairMetric.PairMetric.normalize1"]], "normalize2() (afl.double_agent.pairmetric.pairmetric method)": [[38, "AFL.double_agent.PairMetric.PairMetric.normalize2"]], "prod() (afl.double_agent.pairmetric.combinemetric method)": [[38, "AFL.double_agent.PairMetric.CombineMetric.prod"]], "sum() (afl.double_agent.pairmetric.combinemetric method)": [[38, "AFL.double_agent.PairMetric.CombineMetric.sum"]], "afl.double_agent.phaselabeler": [[39, "module-AFL.double_agent.PhaseLabeler"]], "affinitypropagation (class in afl.double_agent.phaselabeler)": [[39, "AFL.double_agent.PhaseLabeler.AffinityPropagation"]], "gaussianmixturemodel (class in afl.double_agent.phaselabeler)": [[39, "AFL.double_agent.PhaseLabeler.GaussianMixtureModel"]], "phaselabeler (class in afl.double_agent.phaselabeler)": [[39, "AFL.double_agent.PhaseLabeler.PhaseLabeler"]], "spectralclustering (class in afl.double_agent.phaselabeler)": [[39, "AFL.double_agent.PhaseLabeler.SpectralClustering"]], "calculate() (afl.double_agent.phaselabeler.affinitypropagation method)": [[39, "AFL.double_agent.PhaseLabeler.AffinityPropagation.calculate"]], "calculate() (afl.double_agent.phaselabeler.gaussianmixturemodel method)": [[39, "AFL.double_agent.PhaseLabeler.GaussianMixtureModel.calculate"]], "calculate() (afl.double_agent.phaselabeler.spectralclustering method)": [[39, "AFL.double_agent.PhaseLabeler.SpectralClustering.calculate"]], "remap_labels_by_count() (afl.double_agent.phaselabeler.phaselabeler method)": [[39, "AFL.double_agent.PhaseLabeler.PhaseLabeler.remap_labels_by_count"]], "silhouette() (afl.double_agent.phaselabeler.phaselabeler method)": [[39, "AFL.double_agent.PhaseLabeler.PhaseLabeler.silhouette"]], "afl.double_agent.pipeline": [[40, "module-AFL.double_agent.Pipeline"]], "pipeline (class in afl.double_agent.pipeline)": [[40, "AFL.double_agent.Pipeline.Pipeline"]], "append() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.append"]], "calculate() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.calculate"]], "clear_outputs() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.clear_outputs"]], "copy() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.copy"]], "draw() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.draw"]], "draw_plotly() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.draw_plotly"]], "extend() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.extend"]], "input_variables() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.input_variables"]], "make_graph() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.make_graph"]], "output_variables() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.output_variables"]], "print() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.print"]], "print_code() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.print_code"]], "read() (afl.double_agent.pipeline.pipeline static method)": [[40, "AFL.double_agent.Pipeline.Pipeline.read"]], "search() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.search"]], "write() (afl.double_agent.pipeline.pipeline method)": [[40, "AFL.double_agent.Pipeline.Pipeline.write"]], "afl.double_agent.pipelinecontext": [[41, "module-AFL.double_agent.PipelineContext"]], "nocontextexception": [[41, "AFL.double_agent.PipelineContext.NoContextException"]], "pipelinecontext (class in afl.double_agent.pipelinecontext)": [[41, "AFL.double_agent.PipelineContext.PipelineContext"]], "contexts (afl.double_agent.pipelinecontext.pipelinecontext attribute)": [[41, "AFL.double_agent.PipelineContext.PipelineContext.contexts"]], "get_context() (afl.double_agent.pipelinecontext.pipelinecontext class method)": [[41, "AFL.double_agent.PipelineContext.PipelineContext.get_context"]], "get_contexts() (afl.double_agent.pipelinecontext.pipelinecontext class method)": [[41, "AFL.double_agent.PipelineContext.PipelineContext.get_contexts"]], "afl.double_agent.pipelineop": [[42, "module-AFL.double_agent.PipelineOp"]], "pipelineop (class in afl.double_agent.pipelineop)": [[42, "AFL.double_agent.PipelineOp.PipelineOp"]], "add_to_dataset() (afl.double_agent.pipelineop.pipelineop method)": [[42, "AFL.double_agent.PipelineOp.PipelineOp.add_to_dataset"]], "add_to_tiled() (afl.double_agent.pipelineop.pipelineop method)": [[42, "AFL.double_agent.PipelineOp.PipelineOp.add_to_tiled"]], "calculate() (afl.double_agent.pipelineop.pipelineop method)": [[42, "AFL.double_agent.PipelineOp.PipelineOp.calculate"]], "copy() (afl.double_agent.pipelineop.pipelineop method)": [[42, "AFL.double_agent.PipelineOp.PipelineOp.copy"]], "plot() (afl.double_agent.pipelineop.pipelineop method)": [[42, "AFL.double_agent.PipelineOp.PipelineOp.plot"]], "afl.double_agent.preprocessor": [[43, "module-AFL.double_agent.Preprocessor"]], "arraytovars (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.ArrayToVars"]], "barycentrictoternaryxy (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.BarycentricToTernaryXY"]], "destandardize (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.Destandardize"]], "extrema (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.Extrema"]], "preprocessor (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.Preprocessor"]], "savgolfilter (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.SavgolFilter"]], "standardize (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.Standardize"]], "subtract (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.Subtract"]], "subtractmin (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.SubtractMin"]], "sympytransform (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.SympyTransform"]], "ternaryxytobarycentric (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.TernaryXYToBarycentric"]], "varstoarray (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.VarsToArray"]], "zscale (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.Zscale"]], "zscaleerror (class in afl.double_agent.preprocessor)": [[43, "AFL.double_agent.Preprocessor.ZscaleError"]], "calculate() (afl.double_agent.preprocessor.arraytovars method)": [[43, "AFL.double_agent.Preprocessor.ArrayToVars.calculate"]], "calculate() (afl.double_agent.preprocessor.barycentrictoternaryxy method)": [[43, "AFL.double_agent.Preprocessor.BarycentricToTernaryXY.calculate"]], "calculate() (afl.double_agent.preprocessor.destandardize method)": [[43, "AFL.double_agent.Preprocessor.Destandardize.calculate"]], "calculate() (afl.double_agent.preprocessor.extrema method)": [[43, "AFL.double_agent.Preprocessor.Extrema.calculate"]], "calculate() (afl.double_agent.preprocessor.preprocessor method)": [[43, "AFL.double_agent.Preprocessor.Preprocessor.calculate"]], "calculate() (afl.double_agent.preprocessor.savgolfilter method)": [[43, "AFL.double_agent.Preprocessor.SavgolFilter.calculate"]], "calculate() (afl.double_agent.preprocessor.standardize method)": [[43, "AFL.double_agent.Preprocessor.Standardize.calculate"]], "calculate() (afl.double_agent.preprocessor.subtract method)": [[43, "AFL.double_agent.Preprocessor.Subtract.calculate"]], "calculate() (afl.double_agent.preprocessor.subtractmin method)": [[43, "AFL.double_agent.Preprocessor.SubtractMin.calculate"]], "calculate() (afl.double_agent.preprocessor.sympytransform method)": [[43, "AFL.double_agent.Preprocessor.SympyTransform.calculate"]], "calculate() (afl.double_agent.preprocessor.ternaryxytobarycentric method)": [[43, "AFL.double_agent.Preprocessor.TernaryXYToBarycentric.calculate"]], "calculate() (afl.double_agent.preprocessor.varstoarray method)": [[43, "AFL.double_agent.Preprocessor.VarsToArray.calculate"]], "calculate() (afl.double_agent.preprocessor.zscale method)": [[43, "AFL.double_agent.Preprocessor.Zscale.calculate"]], "calculate() (afl.double_agent.preprocessor.zscaleerror method)": [[43, "AFL.double_agent.Preprocessor.ZscaleError.calculate"]], "afl.double_agent.plotting": [[46, "module-AFL.double_agent.plotting"]], "plot_scatter_mpl() (in module afl.double_agent.plotting)": [[46, "AFL.double_agent.plotting.plot_scatter_mpl"]], "plot_surface_mpl() (in module afl.double_agent.plotting)": [[46, "AFL.double_agent.plotting.plot_surface_mpl"]], "afl.double_agent.util": [[47, "module-AFL.double_agent.util"]], "extract_parameters() (in module afl.double_agent.util)": [[47, "AFL.double_agent.util.extract_parameters"]], "listify() (in module afl.double_agent.util)": [[47, "AFL.double_agent.util.listify"]], "afl.double_agent.xarray_extensions": [[48, "module-AFL.double_agent.xarray_extensions"]], "afl_dataarraytools (class in afl.double_agent.xarray_extensions)": [[48, "AFL.double_agent.xarray_extensions.AFL_DataArrayTools"]], "afl_datasettools (class in afl.double_agent.xarray_extensions)": [[48, "AFL.double_agent.xarray_extensions.AFL_DatasetTools"]], "compositiontools (class in afl.double_agent.xarray_extensions)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools"]], "labeltools (class in afl.double_agent.xarray_extensions)": [[48, "AFL.double_agent.xarray_extensions.LabelTools"]], "scatteringtools (class in afl.double_agent.xarray_extensions)": [[48, "AFL.double_agent.xarray_extensions.ScatteringTools"]], "utilities (class in afl.double_agent.xarray_extensions)": [[48, "AFL.double_agent.xarray_extensions.Utilities"]], "add_grid() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.add_grid"]], "append() (afl.double_agent.xarray_extensions.afl_datasettools method)": [[48, "AFL.double_agent.xarray_extensions.AFL_DatasetTools.append"]], "clean() (afl.double_agent.xarray_extensions.scatteringtools method)": [[48, "AFL.double_agent.xarray_extensions.ScatteringTools.clean"]], "get() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.get"]], "get_grid() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.get_grid"]], "get_grid_old() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.get_grid_old"]], "get_range_scaled() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.get_range_scaled"]], "get_standard_scaled() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.get_standard_scaled"]], "make_default() (afl.double_agent.xarray_extensions.labeltools method)": [[48, "AFL.double_agent.xarray_extensions.LabelTools.make_default"]], "make_ordinal() (afl.double_agent.xarray_extensions.labeltools method)": [[48, "AFL.double_agent.xarray_extensions.LabelTools.make_ordinal"]], "plot_3d() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.plot_3D"]], "plot_linlin() (afl.double_agent.xarray_extensions.scatteringtools method)": [[48, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_linlin"]], "plot_loglog() (afl.double_agent.xarray_extensions.scatteringtools method)": [[48, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_loglog"]], "plot_logwaterfall() (afl.double_agent.xarray_extensions.scatteringtools method)": [[48, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_logwaterfall"]], "plot_mask() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.plot_mask"]], "plot_scatter() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.plot_scatter"]], "plot_surface() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.plot_surface"]], "plot_waterfall() (afl.double_agent.xarray_extensions.scatteringtools method)": [[48, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_waterfall"]], "preprocess_data() (afl.double_agent.xarray_extensions.utilities method)": [[48, "AFL.double_agent.xarray_extensions.Utilities.preprocess_data"]], "ternary_to_xy() (afl.double_agent.xarray_extensions.compositiontools method)": [[48, "AFL.double_agent.xarray_extensions.CompositionTools.ternary_to_xy"]]}})