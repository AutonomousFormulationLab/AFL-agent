Search.setIndex({"docnames": ["explanations/index", "how-to/index", "index", "reference/api/agent/AcquisitionFunction", "reference/api/agent/AgentClient", "reference/api/agent/DowShampoo_SampleDriver", "reference/api/agent/EI_AcquisitionFunction", "reference/api/agent/GaussianProcess", "reference/api/agent/HscedGaussianProcess", "reference/api/agent/Metric", "reference/api/agent/Multimodal_AL_SampleDriver", "reference/api/agent/Multimodal_AgentDriver", "reference/api/agent/PhaseLabeler", "reference/api/agent/PhaseMap", "reference/api/agent/PhaseMap_pandas", "reference/api/agent/SANS_AL_SampleDriver", "reference/api/agent/SAS_AL_SampleDriver", "reference/api/agent/SAS_AgentDriver", "reference/api/agent/SAS_Grid_AL_SampleDriver", "reference/api/agent/SAXS_AL_SampleDriver", "reference/api/agent/UCB_AcquisitionFunction", "reference/api/agent/WatchDog", "reference/api/agent/index", "reference/api/agent/reduce_usaxs", "reference/api/agent/util", "reference/api/agent/vSAS_NoDeck_AL_SampleDriver", "reference/api/agent/xarray_extensions", "reference/api/double_agent/AcquisitionFunction", "reference/api/double_agent/AgentClient", "reference/api/double_agent/AgentDriver", "reference/api/double_agent/AutoSAS", "reference/api/double_agent/AutoSAS_Driver", "reference/api/double_agent/Boundary", "reference/api/double_agent/Extrapolator", "reference/api/double_agent/Generator", "reference/api/double_agent/MaskGrid", "reference/api/double_agent/PairMetric", "reference/api/double_agent/PhaseLabeler", "reference/api/double_agent/Pipeline", "reference/api/double_agent/PipelineContext", "reference/api/double_agent/PipelineOp", "reference/api/double_agent/Preprocessor", "reference/api/double_agent/TensorFlowExtrapolator", "reference/api/double_agent/index", "reference/api/double_agent/plotting", "reference/api/double_agent/util", "reference/api/double_agent/xarray_extensions", "reference/index", "tutorials/getting_started", "tutorials/index", "tutorials/installation"], "filenames": ["explanations/index.rst", "how-to/index.rst", "index.rst", "reference/api/agent/AcquisitionFunction.rst", "reference/api/agent/AgentClient.rst", "reference/api/agent/DowShampoo_SampleDriver.rst", "reference/api/agent/EI_AcquisitionFunction.rst", "reference/api/agent/GaussianProcess.rst", "reference/api/agent/HscedGaussianProcess.rst", "reference/api/agent/Metric.rst", "reference/api/agent/Multimodal_AL_SampleDriver.rst", "reference/api/agent/Multimodal_AgentDriver.rst", "reference/api/agent/PhaseLabeler.rst", "reference/api/agent/PhaseMap.rst", "reference/api/agent/PhaseMap_pandas.rst", "reference/api/agent/SANS_AL_SampleDriver.rst", "reference/api/agent/SAS_AL_SampleDriver.rst", "reference/api/agent/SAS_AgentDriver.rst", "reference/api/agent/SAS_Grid_AL_SampleDriver.rst", "reference/api/agent/SAXS_AL_SampleDriver.rst", "reference/api/agent/UCB_AcquisitionFunction.rst", "reference/api/agent/WatchDog.rst", "reference/api/agent/index.rst", "reference/api/agent/reduce_usaxs.rst", "reference/api/agent/util.rst", "reference/api/agent/vSAS_NoDeck_AL_SampleDriver.rst", "reference/api/agent/xarray_extensions.rst", "reference/api/double_agent/AcquisitionFunction.rst", "reference/api/double_agent/AgentClient.rst", "reference/api/double_agent/AgentDriver.rst", "reference/api/double_agent/AutoSAS.rst", "reference/api/double_agent/AutoSAS_Driver.rst", "reference/api/double_agent/Boundary.rst", "reference/api/double_agent/Extrapolator.rst", "reference/api/double_agent/Generator.rst", "reference/api/double_agent/MaskGrid.rst", "reference/api/double_agent/PairMetric.rst", "reference/api/double_agent/PhaseLabeler.rst", "reference/api/double_agent/Pipeline.rst", "reference/api/double_agent/PipelineContext.rst", "reference/api/double_agent/PipelineOp.rst", "reference/api/double_agent/Preprocessor.rst", "reference/api/double_agent/TensorFlowExtrapolator.rst", "reference/api/double_agent/index.rst", "reference/api/double_agent/plotting.rst", "reference/api/double_agent/util.rst", "reference/api/double_agent/xarray_extensions.rst", "reference/index.rst", "tutorials/getting_started.rst", "tutorials/index.rst", "tutorials/installation.rst"], "titles": ["Explanations", "How-To Guides", "AFL-agent", "AFL.agent.AcquisitionFunction module", "AFL.agent.AgentClient module", "AFL.agent.DowShampoo_SampleDriver module", "AFL.agent.EI_AcquisitionFunction module", "AFL.agent.GaussianProcess module", "AFL.agent.HscedGaussianProcess module", "AFL.agent.Metric module", "AFL.agent.Multimodal_AL_SampleDriver module", "AFL.agent.Multimodal_AgentDriver module", "AFL.agent.PhaseLabeler module", "AFL.agent.PhaseMap module", "AFL.agent.PhaseMap_pandas module", "AFL.agent.SANS_AL_SampleDriver module", "AFL.agent.SAS_AL_SampleDriver module", "AFL.agent.SAS_AgentDriver module", "AFL.agent.SAS_Grid_AL_SampleDriver module", "AFL.agent.SAXS_AL_SampleDriver module", "AFL.agent.UCB_AcquisitionFunction module", "AFL.agent.WatchDog module", "AFL.agent package", "AFL.agent.reduce_usaxs module", "AFL.agent.util module", "AFL.agent.vSAS_NoDeck_AL_SampleDriver module", "AFL.agent.xarray_extensions module", "AFL.double_agent.AcquisitionFunction module", "AFL.double_agent.AgentClient module", "AFL.double_agent.AgentDriver module", "AFL.double_agent.AutoSAS module", "AFL.double_agent.AutoSAS_Driver module", "AFL.double_agent.Boundary module", "AFL.double_agent.Extrapolator module", "AFL.double_agent.Generator module", "AFL.double_agent.MaskGrid module", "AFL.double_agent.PairMetric module", "AFL.double_agent.PhaseLabeler module", "AFL.double_agent.Pipeline module", "AFL.double_agent.PipelineContext module", "AFL.double_agent.PipelineOp module", "AFL.double_agent.Preprocessor module", "AFL.double_agent.TensorFlowExtrapolator module", "AFL.double_agent API", "AFL.double_agent.plotting module", "AFL.double_agent.util module", "AFL.double_agent.xarray_extensions module", "Reference", "Getting Started with AFL-agent", "Tutorials", "Setup"], "terms": {"tho": 0, "goal": 0, "thi": [0, 2, 6, 20, 27, 33, 34, 36, 38, 41, 45, 48, 50], "section": [0, 2], "i": [0, 2, 22, 23, 36, 38, 41, 45, 47, 50], "deepen": 0, "broaden": 0, "your": [0, 2, 48, 50], "understand": 0, "afl": [0, 1, 47, 49, 50], "agent": [0, 1, 38, 49, 50], "codebas": 0, "project": [0, 14], "underli": [0, 2], "concept": [0, 2], "practic": 1, "step": [1, 2, 34, 49], "work": [1, 6, 20, 50], "python": [2, 38, 45, 48, 50], "librari": 2, "implement": 2, "autonom": 2, "activ": [2, 39, 50], "learn": [2, 48, 49], "materi": 2, "scienc": 2, "applic": 2, "describ": 2, "manuscript": 2, "small": 2, "angl": [2, 23], "scatter": [2, 14], "acceler": 2, "soft": 2, "formul": 2, "optim": [2, 33], "The": [2, 22, 38, 41, 45, 47, 50], "design": 2, "guid": [2, 50], "experiment": 2, "measur": [2, 14, 27, 41, 48], "campaign": 2, "effici": 2, "map": [2, 48], "phase": [2, 48], "boundari": [2, 43, 47, 48], "properti": [2, 14, 33], "us": [2, 22, 27, 33, 34, 38, 41, 45, 47, 48, 50], "advanc": 2, "machin": [2, 50], "techniqu": 2, "oper": [2, 38, 40, 41, 47, 48], "can": [2, 50], "compos": 2, "pipelin": [2, 39, 41, 47, 48, 49], "ar": [2, 23, 27, 35, 36, 38, 39, 41, 45], "modular": 2, "visualiz": 2, "serializ": 2, "self": [2, 20, 27, 32, 33, 34, 36, 38, 40, 41], "document": 2, "trivial": 2, "support": [2, 50], "multimod": 2, "data": [2, 9, 23, 26, 33, 34, 40, 41, 46, 47, 48], "process": [2, 33, 47], "all": [2, 23, 27, 33, 34, 36, 38, 40, 41, 50], "intermedi": 2, "store": [2, 38], "xarrai": [2, 27, 33, 34, 36, 40, 41, 48], "base": [2, 3, 6, 9, 12, 14, 20, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 50], "model": [2, 6, 39], "rich": 2, "visual": 2, "tool": [2, 50], "analyz": [2, 23], "calcul": [2, 9, 23, 27, 32, 33, 34, 35, 36, 37, 38, 40, 41, 48], "you": [2, 48, 50], "pip": [2, 50], "git": [2, 50], "http": [2, 39, 50], "github": [2, 50], "com": [2, 39, 50], "usnistgov": [2, 50], "pleas": [2, 22, 47], "see": [2, 39, 48, 50], "setup": [2, 49], "page": 2, "more": [2, 27, 48], "detail": 2, "If": [2, 38, 41, 50], "research": 2, "cite": 2, "under": 2, "review": 2, "organ": 2, "accord": [2, 34], "philosphi": 2, "diataxi": 2, "fr": 2, "It": [2, 41], "four": 2, "tutori": [2, 48], "beginn": 2, "how": [2, 39, 48, 49], "specif": 2, "task": 2, "explan": [2, 48], "discuss": 2, "outlin": 2, "principl": 2, "refer": 2, "technic": [2, 45], "prerequisit": 2, "basic": [2, 48], "develop": 2, "option": 2, "depend": [2, 48], "from": [2, 23, 27, 38, 41, 48], "branch": 2, "offlin": 2, "troubleshoot": 2, "get": [2, 26, 38, 46, 49], "start": [2, 49], "To": [2, 50], "doubl": 2, "api": 2, "class": [3, 6, 9, 12, 14, 20, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46], "acquisit": [3, 6, 20, 22, 27], "object": [3, 6, 9, 12, 14, 20, 26, 33, 39, 41, 45, 46], "add_exclus": [3, 6, 20], "point": [3, 6, 9, 20, 23, 27, 33], "copi": [3, 6, 9, 12, 14, 20, 26, 38, 40, 46, 50], "execut": [3, 6, 20, 38], "get_next_sampl": [3, 6, 20, 27], "nth": [3, 6, 20], "0": [3, 6, 14, 20, 24, 26, 27, 32, 34, 36, 41, 46, 48], "composition_check": [3, 6, 20], "none": [3, 6, 9, 12, 14, 20, 23, 24, 26, 27, 32, 33, 36, 37, 38, 40, 41, 44, 46, 50], "plot": [3, 6, 14, 20, 32, 33, 40, 43, 47], "mask": [3, 6, 20, 23, 26, 35, 46], "fals": [3, 6, 20, 26, 32, 37, 38, 41, 46], "kwarg": [3, 6, 9, 20], "reset_phasemap": [3, 6, 20], "phasemap": [3, 6, 12, 14, 20, 22, 47], "iterationcombin": [3, 22], "function1": 3, "function2": 3, "function2_frequ": 3, "5": [3, 41], "calculate_metr": [3, 6, 20], "gp": [3, 6, 20], "lowestdens": [3, 22], "bandwidth": 3, "075": 3, "y_mean": 3, "y_var": 3, "random": [3, 22], "varianc": [3, 22], "gauss2d": [3, 6, 20, 22], "x": [3, 6, 9, 20, 23, 26, 46, 48], "y": [3, 6, 20, 23, 41], "cx": [3, 6, 20], "cy": [3, 6, 20], "sx": [3, 6, 20], "1": [3, 6, 14, 20, 23, 24, 26, 27, 34, 36, 41, 45, 46, 48], "sy": [3, 6, 20], "sample_randomli": [6, 20], "ei": [6, 22], "model_typ": 6, "classifi": [6, 20, 33], "function": [6, 20, 27], "singl": 6, "either": 6, "regressor": [6, 20, 33], "specifi": [6, 41], "init": 6, "pseudoei": [6, 22], "thompson_sampl": [6, 20], "two": [6, 20], "onli": [6, 20, 36], "One": [6, 20], "ha": [6, 20, 50], "other": [6, 20, 48], "need": [6, 20, 38, 50], "generaliz": [6, 20], "requir": [6, 20, 38], "some": [6, 20], "thought": [6, 20], "gpr": [6, 20], "delaunai": [9, 22, 36, 43], "data_vari": [9, 12], "param": [9, 12, 36, 37, 48], "similar": [9, 22, 36, 43, 48], "comput": [9, 23, 48], "triangul": 9, "given": 9, "arrai": [9, 23], "shape": [9, 14], "num_nod": 9, "2": [9, 26, 32, 41, 45, 46], "return": [9, 23, 36, 38, 39], "adjac": 9, "matrix": [9, 36], "distanc": [9, 22, 36, 43], "name": [9, 26, 27, 32, 33, 34, 35, 36, 37, 38, 40, 41, 46, 50], "constrain_sam": [9, 36], "constrain_differ": [9, 36], "dataset": [9, 26, 27, 32, 33, 34, 35, 36, 37, 38, 40, 41, 44, 46, 48], "dummi": [9, 22, 36, 43], "apply_constraint": [9, 36], "arg": [9, 20], "normalize1": [9, 36], "normalize2": [9, 36], "to_dict": 9, "multimetr": [9, 22], "combine_bi": [9, 36], "prod": [9, 36], "combine_by_pow": [9, 36], "combine_by_coeff": [9, 36], "data_list": [9, 36], "sum": [9, 36], "update_nam": 9, "listifi": [9, 22, 43, 45], "obj": [9, 45], "affinitypropag": [12, 22, 37, 43], "label": [12, 14, 26, 33, 44, 46, 48], "dbscan": [12, 22], "gaussianmixturemodel": [12, 22, 37, 43], "kerasclassifi": [12, 22], "model_path": 12, "model_q": 12, "deriv0": 12, "transpose_var": 12, "sampl": [12, 26, 27, 33, 36, 37, 46, 48], "remap_labels_by_count": [12, 37], "silhouett": [12, 37], "w": [12, 37], "spectralclust": [12, 22, 37, 43, 48], "compon": [14, 24, 26, 27, 32, 34, 41, 44, 46, 47, 48], "contain": [14, 38], "composit": [14, 24, 26, 27, 33, 41, 46, 48], "append": [14, 26, 38, 46], "label_encod": 14, "labels_ordin": [14, 26, 46], "numer": [14, 41], "sort": 14, "spatial": 14, "posit": 14, "classmethod": [14, 39], "load": 14, "fname": 14, "ncompon": 14, "rescal": 14, "true": [14, 24, 26, 33, 38, 40, 41, 44, 46], "mpl_kw": [14, 26, 44, 46], "save": 14, "size": 14, "slice": [14, 41], "indic": [14, 41], "update_encod": 14, "phasemapmodel": [14, 22], "phasemapview_mpl": [14, 22], "cmap": 14, "jet": 14, "line": 14, "xy": [14, 41], "ax": [14, 24, 26, 46], "make_ax": 14, "subplot": 14, "scatter_ternari": 14, "cart2ternari": [14, 22], "ternari": [14, 24, 26, 41, 44, 46], "cartesian": [14, 24, 26, 34, 46], "coorid": 14, "composition_grid": [14, 22, 24], "pts_per_row": [14, 24, 26, 34, 46], "50": [14, 24, 26, 34, 46], "basi": [14, 24, 26, 34, 46], "100": [14, 48], "dim": [14, 24, 26, 34, 37, 41, 46, 48], "3": [14, 24, 34, 41, 48, 50], "ep": [14, 24, 34], "1e": [14, 24, 26, 34, 46], "09": [14, 24, 34], "format_plot_ternari": [14, 22], "label_a": 14, "label_b": 14, "label_c": 14, "phasemap_grid_factori": [14, 22], "rescale_composit": [14, 22], "remove_zero": 14, "ternary2cart": [14, 22], "get_next_sample_passthrough": [20, 22], "next_sampl": [20, 27, 48], "pseudoucb": [20, 22, 27, 43], "scale": [20, 41], "modul": [22, 43, 47, 48], "deprec": [22, 47], "remov": [22, 23, 41, 47], "futur": [22, 47], "version": [22, 47, 50], "double_ag": [22, 47, 48], "instead": [22, 47], "acquisitionfunct": [22, 43, 47], "ei_acquisitionfunct": [22, 47], "ucb_acquisitionfunct": [22, 47], "gaussianprocess": [22, 47], "hscedgaussianprocess": [22, 47], "phaselabel": [22, 43, 47], "phasemap_panda": [22, 47], "metric": [22, 47, 48], "agentcli": [22, 43, 47], "sas_agentdriv": [22, 47], "multimodal_agentdriv": [22, 47], "dowshampoo_sampledriv": [22, 47], "sans_al_sampledriv": [22, 47], "saxs_al_sampledriv": [22, 47], "sas_al_sampledriv": [22, 47], "sas_grid_al_sampledriv": [22, 47], "multimodal_al_sampledriv": [22, 47], "vsas_nodeck_al_sampledriv": [22, 47], "watchdog": [22, 47], "xarray_extens": [22, 43, 47], "afl_dataarraytool": [22, 26, 43, 46], "afl_datasettool": [22, 26, 43, 46], "compositiontool": [22, 26, 43, 46], "labeltool": [22, 26, 43, 46], "scatteringtool": [22, 26, 43, 46], "util": [22, 26, 46, 47], "reduce_usax": [22, 47], "amplifier_correct": [22, 23], "calc_r_q": [22, 23], "centroid": [22, 23], "reduce_uascan": [22, 23], "remove_masked_data": [22, 23], "composition_grid_ternari": [22, 24], "mpl_format_ternari": [22, 24], "ternary_to_xi": [22, 24, 26, 46], "r": 23, "q": [23, 26, 41, 46], "raw": 23, "usax": 23, "signal": [23, 41], "second": [23, 41], "dark": 23, "gain": 23, "correct": [23, 41], "amplifi": 23, "current": [23, 26, 38, 39, 46], "v": 23, "": [23, 36, 45, 48], "t": [23, 38, 45], "d": [23, 26, 46, 48], "g": 23, "wavelength": 23, "pd": 23, "pd_bkg": 23, "pd_gain": 23, "i0": 23, "i0_bkg": 23, "i0_gain": 23, "ar_cent": 23, "v_f_gain": 23, "paramet": [23, 38, 41, 45], "float": [23, 27, 32, 34, 41], "lambda": [23, 27], "A": [23, 26, 41, 45, 46, 48], "center": 23, "rock": 23, "curv": 23, "along": [23, 41], "axi": 23, "numpi": [23, 41, 48], "ndarrai": [23, 36], "crystal": 23, "count": [23, 27], "time": 23, "each": 23, "photodiod": 23, "background": 23, "incid": 23, "monitor": 23, "i0_amp_gain": 23, "voltag": 23, "frequenc": 23, "convert": 23, "qvec": 23, "rvec": 23, "i_o": 23, "dictionari": [23, 40], "root": 23, "reduct": 23, "livedata": 23, "conveni": 23, "routin": 23, "range_spec": 24, "label_right": 24, "label_top": 24, "label_left": 24, "comp": 24, "normal": [24, 26, 36, 46], "coordin": [24, 26, 41, 46], "da": [26, 46], "data_dict": [26, 46], "concat_dim": [26, 46], "warn": [26, 41, 46], "much": [26, 46], "loss": [26, 46], "add_grid": [26, 46], "dim_nam": [26, 46], "grid": [26, 27, 33, 34, 35, 41, 46], "overwrit": [26, 46], "get_grid": [26, 46], "get_grid_old": [26, 46], "get_range_sc": [26, 46], "spec": [26, 46], "get_standard_sc": [26, 46], "plot_3d": [26, 46], "set_label": [26, 46], "plot_continu": 26, "plot_discret": 26, "plot_mask": [26, 46], "mask_nam": [26, 46], "components_nam": [26, 46], "components_grid": [26, 46], "plot_scatt": [26, 46], "set_axes_label": [26, 44, 46], "discrete_label": [26, 44, 46], "plot_surfac": [26, 46], "make_default": [26, 46], "make_ordin": [26, 46], "ordinal_nam": [26, 46], "labels_nam": [26, 46], "sortbi": [26, 46], "clean": [26, 41, 46], "qlo": [26, 46], "qhi": [26, 46], "qlo_isel": [26, 46], "qhi_isel": [26, 46], "pedest": [26, 41, 46], "12": [26, 46], "npt": [26, 41, 46], "250": [26, 41, 46], "deriv": [26, 41, 46, 48], "sgf_window_length": [26, 46], "31": [26, 41, 46], "sgf_polyord": [26, 46], "apply_log_scal": [26, 41, 46], "plot_linlin": [26, 46], "logq": [26, 46], "ylabel": [26, 46], "intens": [26, 46], "u": [26, 46], "xlabel": [26, 46], "\u00e5": [26, 46], "legend": [26, 46], "plot_loglog": [26, 46], "plot_logwaterfal": [26, 46], "10": [26, 46, 48], "plot_waterfal": [26, 46], "preprocess_data": [26, 46], "xname": [26, 46], "yname": [26, 46], "xlo": [26, 41, 46], "xhi": [26, 41, 46], "xlo_isel": [26, 41, 46], "xhi_isel": [26, 41, 46], "logx": [26, 46], "logi": [26, 46], "gather": 27, "one": 27, "input": [27, 34, 38, 41, 45], "inform": 27, "choos": [27, 48], "suppli": [27, 33, 34, 36, 41], "except": [27, 39], "acquisitionerror": [27, 43], "rais": [27, 41], "when": [27, 41], "an": [27, 38, 45], "error": [27, 50], "decis": 27, "occur": 27, "input_vari": [27, 32, 34, 35, 36, 37, 38, 40, 41, 48], "list": [27, 32, 33, 34, 36, 38, 39, 40, 41, 44, 45], "str": [27, 32, 33, 34, 36, 38, 40, 41, 44, 45], "grid_vari": [27, 33, 34], "grid_dim": [27, 33, 34], "output_prefix": [27, 32, 33, 35, 40, 48], "output_vari": [27, 33, 34, 35, 36, 37, 38, 40, 41, 48], "next_composit": 27, "decision_rtol": 27, "05": 27, "excluded_comps_vari": 27, "excluded_comps_dim": 27, "exclusion_radiu": [27, 34], "001": [27, 34], "int": [27, 34, 41], "acquisitionfunctionbas": 27, "pipelineop": [27, 32, 33, 34, 35, 36, 37, 38, 41, 43, 45, 47], "appli": [27, 33, 34, 35, 36, 41], "exclude_previous_sampl": 27, "modifi": 27, "surfac": 27, "place": 27, "gaussian": [27, 33], "exclus": 27, "zone": 27, "over": [27, 41, 45], "previous": 27, "next": 27, "evalu": 27, "provid": [27, 33, 34, 38, 40], "method": [27, 38, 45], "first": [27, 41, 48], "find": [27, 41], "within": 27, "maximum": [27, 41], "valu": [27, 36, 41], "set": 27, "randomli": 27, "maxvalueaf": [27, 43, 48], "combine_coeff": 27, "multimodalmask_maxvalueaf": [27, 43], "decision_vari": 27, "mask_label_vari": 27, "phase_select_coord": 27, "dict": [27, 34, 36, 38, 41, 45], "randomaf": [27, 43], "without": [27, 45, 50], "exclud": 27, "previou": 27, "boundaryscor": [32, 43], "gt_hull_vari": 32, "al_hull_vari": 32, "boundary_scor": 32, "bool": [32, 38, 41, 44], "concavehul": [32, 43], "hull_tracing_ratio": 32, "drop_phas": 32, "component_dim": [32, 34, 41, 44], "label_vari": 32, "segmentize_length": 32, "025": 32, "allow_hol": 32, "take": [33, 34, 38, 41], "discret": 33, "onto": [33, 41], "dummyextrapol": [33, 43], "feature_input_vari": [33, 48], "predictor_input_vari": [33, 48], "sample_dim": [33, 34, 36, 41], "mpl_kwarg": [33, 40], "figur": [33, 40], "gaussianprocessclassifi": [33, 43, 48], "kernel": 33, "fmin_l_bfgs_b": 33, "gaussianprocessregressor": [33, 43], "predictor_uncertainty_vari": 33, "fix_nan": 33, "parametr": 34, "barycentricgrid": [34, 43], "barycentricgridgener": 34, "cartesiangrid": [34, 43], "grid_spec": 34, "cartesiangridgener": 34, "produc": [34, 35, 36, 38], "min": [34, 41], "max": [34, 41], "gaussianpoint": [34, 43], "comps_dim": 34, "exclusion_depth": 34, "gaussianpointsgener": 34, "generatorbas": 34, "stub": [34, 41], "pairmetr": [35, 43, 47], "pair": [35, 36], "matric": [35, 36], "result": [35, 36, 38, 45], "mask_vari": 35, "grid_dim_in": 35, "grid_dim_out": 35, "renam": 35, "output": [35, 38, 40], "dimens": [35, 41], "combinemetr": [36, 43], "number": [36, 41], "ani": [36, 39, 45, 50], "delaunaymetr": 36, "distancemetr": 36, "dummymetr": 36, "j": 36, "constrain": 36, "perfectli": 36, "dissimilar": 36, "diagon": 36, "equal": 36, "between": [36, 48], "similaritymetr": 36, "use_silhouett": 37, "should": [38, 40], "format": 38, "pipelinesop": 38, "constructor": [38, 41, 45], "have": [38, 41, 45, 48, 50], "exact": 38, "signatur": 38, "pipelineopbas": [38, 40], "write": 38, "xr": [38, 48], "dataarrai": 38, "prefer": 38, "op": [38, 41, 45], "pipelinecontext": [38, 43, 47], "defin": 38, "build": [38, 48, 49, 50], "mirror": 38, "behavior": 38, "tiled_data": [38, 40], "disable_progress_bar": 38, "clear_output": 38, "clear": 38, "draw": 38, "figsiz": 38, "8": 38, "edge_label": 38, "graph": 38, "draw_plotli": 38, "extend": 38, "variabl": [38, 39, 41], "fulli": 38, "includ": 38, "gener": [38, 41, 43, 47, 48, 50], "aren": 38, "These": 38, "hopefulli": 38, "distinguish": 38, "isn": 38, "enforc": 38, "moment": 38, "make_graph": 38, "networkx": 38, "represent": 38, "print": [38, 45], "summari": [38, 41], "print_cod": 38, "string": [38, 45], "approxim": 38, "code": 38, "run": [38, 48], "attribut": 38, "fail": 38, "edit": [38, 50], "mai": 38, "ident": 38, "caution": 38, "static": 38, "read": 38, "filenam": 38, "pickl": 38, "file": [38, 50], "disk": 38, "import": [38, 48, 50], "pipeline1": 38, "pickled_pipelin": 38, "pkl": 38, "search": [38, 41], "filepath": 38, "written": 38, "nocontextexcept": [39, 43], "inherit": [39, 40], "allow": 39, "context": [39, 48], "manag": [39, 48], "abus": 39, "stackoverflow": 39, "question": 39, "49573131": 39, "pymc3": 39, "assign": 39, "_thread": 39, "_local": 39, "get_context": 39, "deepest": 39, "stack": 39, "input_prefix": 40, "abc": 40, "abstract": 40, "processor": 40, "add_to_dataset": 40, "copy_dataset": 40, "add": [40, 48], "add_to_til": 40, "tile": 40, "catalogu": 40, "preprocess": 41, "transform": 41, "arraytovar": [41, 43], "split_dim": 41, "postfix": 41, "squeez": 41, "datasettovar": 41, "extract": 41, "insert": 41, "split": 41, "datarrai": 41, "ad": 41, "call": 41, "barycentrictoternaryxi": [41, 43], "note": 41, "adapt": 41, "barycentr": 41, "mpltern": 41, "yuzie007": 41, "destandard": [41, 43], "scale_vari": 41, "min_val": 41, "max_val": 41, "extrema": [41, 43], "return_coord": 41, "slice_dim": 41, "preprocessorbas": 41, "savgolfilt": [41, 43, 48], "window_length": 41, "polyord": 41, "smooth": 41, "via": 41, "savitski": 41, "golai": 41, "filter": 41, "scipi": 41, "savgol_filt": 41, "below": 41, "taken": 41, "trim": 41, "order": 41, "former": 41, "while": [41, 45], "latter": 41, "integ": 41, "advis": 41, "both": 41, "varieti": 41, "attempt": [41, 45], "log10": 41, "new": [41, 50], "creat": [41, 48, 50], "log_": 41, "duplic": 41, "multipl": [41, 50], "same": 41, "averag": 41, "nan": 41, "fill": 41, "interpol": 41, "constant": 41, "minimum": 41, "geometr": 41, "rather": 41, "than": 41, "linearli": 41, "space": 41, "remain": 41, "drop": 41, "final": [41, 48], "standard": [41, 43], "subtract": [41, 43], "coord_valu": 41, "baselin": 41, "subtractmin": [41, 43], "sympytransform": [41, 43], "transform_dim": 41, "sympi": 41, "express": 41, "ternaryxytobarycentr": [41, 43], "varstoarrai": [41, 43], "variable_dim": 41, "variable_map": 41, "zscale": [41, 43], "z": 41, "mean": 41, "deviat": 41, "zscaleerror": [41, 43], "zscale_error": 41, "y_err": 41, "autosa": [43, 47], "extrapol": [43, 47], "maskgrid": [43, 47], "preprocessor": [43, 47], "tensorflowextrapol": [43, 47], "extract_paramet": [43, 45], "plot_scatter_mpl": [43, 44], "plot_surface_mpl": [43, 44], "autosas_driv": [43, 47], "agentdriv": [43, 47], "component_vari": 44, "artist": 44, "collect": 45, "helper": 45, "__init__": 45, "reconstruct": 45, "target": 45, "try": [45, 50], "typic": 45, "make": [45, 48, 50], "iter": 45, "primari": 45, "case": 45, "handl": 45, "sometim": 45, "length": 45, "alwai": 45, "pass": 45, "In": 45, "particular": 45, "which": 45, "we": [45, 48], "do": 45, "want": [45, 48, 50], "exampl": 45, "def": 45, "my_func": 45, "out": 45, "test": [45, 50], "last": 45, "would": 45, "been": 45, "e": [45, 50], "newlin": 45, "component_var": 46, "core": 47, "apiserv": 47, "driver": 47, "packag": [47, 50], "autom": [47, 50], "help": 48, "walk": 48, "through": 48, "befor": [48, 50], "sure": [48, 50], "11": [48, 50], "later": [48, 50], "instal": 48, "here": 48, "complet": 48, "demonstr": 48, "np": 48, "cosin": 48, "extrap": 48, "extrap_vari": 48, "synthet": 48, "n_sampl": 48, "n_point": 48, "linspac": 48, "data_var": 48, "coord": 48, "b": 48, "c": 48, "ds_out": 48, "let": 48, "break": 48, "down": 48, "what": 48, "happen": 48, "necessari": [48, 50], "syntax": 48, "sever": [48, 50], "group": [48, 50], "togeth": 48, "predict": 48, "select": 48, "our": 48, "now": 48, "ve": 48, "seen": 48, "might": 48, "about": 48, "building_pipelin": 48, "architectur": 48, "custom_pipelin": 48, "follow": 49, "cover": 50, "differ": 50, "wai": 50, "ensur": 50, "sourc": 50, "simplest": 50, "directli": 50, "For": 50, "ll": 50, "clone": 50, "repositori": 50, "mode": 50, "cd": 50, "jupyt": 50, "notebook": 50, "tensorflow": 50, "gpflow": 50, "pytorch": 50, "featur": 50, "dev": 50, "squar": 50, "bracket": 50, "commit": 50, "hash": 50, "environ": 50, "internet": 50, "access": 50, "wheel": 50, "On": 50, "whl": 50, "afl_ag": 50, "py3": 50, "common": 50, "issu": 50, "solut": 50, "conflict": 50, "encount": 50, "virtual": 50, "m": 50, "venv": 50, "bin": 50, "window": 50, "script": 50, "miss": 50, "after": 50, "failur": 50, "latest": 50, "upgrad": 50, "setuptool": 50}, "objects": {"AFL.agent": [[3, 0, 0, "-", "AcquisitionFunction"], [6, 0, 0, "-", "EI_AcquisitionFunction"], [9, 0, 0, "-", "Metric"], [12, 0, 0, "-", "PhaseLabeler"], [13, 0, 0, "-", "PhaseMap"], [14, 0, 0, "-", "PhaseMap_pandas"], [20, 0, 0, "-", "UCB_AcquisitionFunction"], [23, 0, 0, "-", "reduce_usaxs"], [24, 0, 0, "-", "util"], [26, 0, 0, "-", "xarray_extensions"]], "AFL.agent.AcquisitionFunction": [[3, 1, 1, "", "Acquisition"], [3, 1, 1, "", "IterationCombined"], [3, 1, 1, "", "LowestDensity"], [3, 1, 1, "", "Random"], [3, 1, 1, "", "Variance"], [3, 3, 1, "", "gauss2d"]], "AFL.agent.AcquisitionFunction.Acquisition": [[3, 2, 1, "", "add_exclusion"], [3, 2, 1, "", "copy"], [3, 2, 1, "", "execute"], [3, 2, 1, "", "get_next_sample"], [3, 2, 1, "", "plot"], [3, 2, 1, "", "reset_phasemap"]], "AFL.agent.AcquisitionFunction.IterationCombined": [[3, 2, 1, "", "calculate_metric"], [3, 2, 1, "", "reset_phasemap"]], "AFL.agent.AcquisitionFunction.LowestDensity": [[3, 2, 1, "", "calculate_metric"]], "AFL.agent.AcquisitionFunction.Random": [[3, 2, 1, "", "calculate_metric"]], "AFL.agent.AcquisitionFunction.Variance": [[3, 2, 1, "", "calculate_metric"]], "AFL.agent.EI_AcquisitionFunction": [[6, 1, 1, "", "Acquisition"], [6, 1, 1, "", "EI"], [6, 3, 1, "", "gauss2d"], [6, 1, 1, "", "pseudoEI"]], "AFL.agent.EI_AcquisitionFunction.Acquisition": [[6, 2, 1, "", "add_exclusion"], [6, 2, 1, "", "copy"], [6, 2, 1, "", "execute"], [6, 2, 1, "", "get_next_sample"], [6, 2, 1, "", "plot"], [6, 2, 1, "", "reset_phasemap"]], "AFL.agent.EI_AcquisitionFunction.EI": [[6, 2, 1, "", "calculate_metric"]], "AFL.agent.EI_AcquisitionFunction.pseudoEI": [[6, 2, 1, "", "calculate_metric"]], "AFL.agent.Metric": [[9, 1, 1, "", "Delaunay"], [9, 1, 1, "", "Distance"], [9, 1, 1, "", "Dummy"], [9, 1, 1, "", "Metric"], [9, 1, 1, "", "MultiMetric"], [9, 1, 1, "", "Similarity"], [9, 3, 1, "", "listify"]], "AFL.agent.Metric.Delaunay": [[9, 2, 1, "", "calculate"]], "AFL.agent.Metric.Distance": [[9, 2, 1, "", "calculate"]], "AFL.agent.Metric.Dummy": [[9, 2, 1, "", "calculate"]], "AFL.agent.Metric.Metric": [[9, 2, 1, "", "apply_constraints"], [9, 2, 1, "", "calculate"], [9, 2, 1, "", "copy"], [9, 2, 1, "", "normalize1"], [9, 2, 1, "", "normalize2"], [9, 2, 1, "", "to_dict"]], "AFL.agent.Metric.MultiMetric": [[9, 2, 1, "", "calculate"], [9, 2, 1, "", "prod"], [9, 2, 1, "", "sum"], [9, 2, 1, "", "to_dict"], [9, 2, 1, "", "update_name"]], "AFL.agent.Metric.Similarity": [[9, 2, 1, "", "calculate"]], "AFL.agent.PhaseLabeler": [[12, 1, 1, "", "AffinityPropagation"], [12, 1, 1, "", "DBSCAN"], [12, 1, 1, "", "GaussianMixtureModel"], [12, 1, 1, "", "KerasClassifier"], [12, 1, 1, "", "PhaseLabeler"], [12, 1, 1, "", "SpectralClustering"]], "AFL.agent.PhaseLabeler.AffinityPropagation": [[12, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.DBSCAN": [[12, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.GaussianMixtureModel": [[12, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.KerasClassifier": [[12, 2, 1, "", "label"]], "AFL.agent.PhaseLabeler.PhaseLabeler": [[12, 2, 1, "", "copy"], [12, 2, 1, "", "label"], [12, 2, 1, "", "remap_labels_by_count"], [12, 2, 1, "", "silhouette"]], "AFL.agent.PhaseLabeler.SpectralClustering": [[12, 2, 1, "", "label"]], "AFL.agent.PhaseMap_pandas": [[14, 1, 1, "", "PhaseMap"], [14, 1, 1, "", "PhaseMapModel"], [14, 1, 1, "", "PhaseMapView_MPL"], [14, 3, 1, "", "cart2ternary"], [14, 3, 1, "", "composition_grid"], [14, 3, 1, "", "format_plot_ternary"], [14, 3, 1, "", "phasemap_grid_factory"], [14, 3, 1, "", "rescale_compositions"], [14, 3, 1, "", "ternary2cart"]], "AFL.agent.PhaseMap_pandas.PhaseMap": [[14, 2, 1, "", "append"], [14, 4, 1, "", "components"], [14, 4, 1, "", "compositions"], [14, 2, 1, "", "copy"], [14, 4, 1, "", "label_encoder"], [14, 4, 1, "", "labels"], [14, 4, 1, "", "labels_ordinal"], [14, 2, 1, "", "load"], [14, 4, 1, "", "measurements"], [14, 4, 1, "", "ncomponents"], [14, 2, 1, "", "plot"], [14, 2, 1, "", "project"], [14, 2, 1, "", "save"], [14, 4, 1, "", "shape"], [14, 4, 1, "", "size"], [14, 2, 1, "", "slice"], [14, 2, 1, "", "update_encoder"]], "AFL.agent.PhaseMap_pandas.PhaseMapModel": [[14, 2, 1, "", "append"]], "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL": [[14, 2, 1, "", "lines"], [14, 2, 1, "", "make_axes"], [14, 2, 1, "", "scatter"], [14, 2, 1, "", "scatter_ternary"]], "AFL.agent.UCB_AcquisitionFunction": [[20, 1, 1, "", "Acquisition"], [20, 3, 1, "", "gauss2d"], [20, 3, 1, "", "get_next_sample_passthrough"], [20, 1, 1, "", "pseudoUCB"]], "AFL.agent.UCB_AcquisitionFunction.Acquisition": [[20, 2, 1, "", "add_exclusion"], [20, 2, 1, "", "copy"], [20, 2, 1, "", "execute"], [20, 2, 1, "", "get_next_sample"], [20, 2, 1, "", "plot"], [20, 2, 1, "", "reset_phasemap"]], "AFL.agent.UCB_AcquisitionFunction.pseudoUCB": [[20, 2, 1, "", "calculate_metric"]], "AFL.agent.reduce_usaxs": [[23, 3, 1, "", "amplifier_corrections"], [23, 3, 1, "", "calc_R_Q"], [23, 3, 1, "", "centroid"], [23, 3, 1, "", "reduce_uascan"], [23, 3, 1, "", "remove_masked_data"]], "AFL.agent.util": [[24, 3, 1, "", "composition_grid"], [24, 3, 1, "", "composition_grid_ternary"], [24, 3, 1, "", "mpl_format_ternary"], [24, 3, 1, "", "ternary_to_xy"]], "AFL.agent.xarray_extensions": [[26, 1, 1, "", "AFL_DataArrayTools"], [26, 1, 1, "", "AFL_DatasetTools"], [26, 1, 1, "", "CompositionTools"], [26, 1, 1, "", "LabelTools"], [26, 1, 1, "", "ScatteringTools"], [26, 1, 1, "", "Utilities"]], "AFL.agent.xarray_extensions.AFL_DatasetTools": [[26, 2, 1, "", "append"]], "AFL.agent.xarray_extensions.CompositionTools": [[26, 2, 1, "", "add_grid"], [26, 2, 1, "", "get"], [26, 2, 1, "", "get_grid"], [26, 2, 1, "", "get_grid_old"], [26, 2, 1, "", "get_range_scaled"], [26, 2, 1, "", "get_standard_scaled"], [26, 2, 1, "", "plot_3D"], [26, 2, 1, "", "plot_continuous"], [26, 2, 1, "", "plot_discrete"], [26, 2, 1, "", "plot_mask"], [26, 2, 1, "", "plot_scatter"], [26, 2, 1, "", "plot_surface"], [26, 2, 1, "", "ternary_to_xy"]], "AFL.agent.xarray_extensions.LabelTools": [[26, 2, 1, "", "make_default"], [26, 2, 1, "", "make_ordinal"]], "AFL.agent.xarray_extensions.ScatteringTools": [[26, 2, 1, "", "clean"], [26, 2, 1, "", "plot_linlin"], [26, 2, 1, "", "plot_loglog"], [26, 2, 1, "", "plot_logwaterfall"], [26, 2, 1, "", "plot_waterfall"]], "AFL.agent.xarray_extensions.Utilities": [[26, 2, 1, "", "preprocess_data"]], "AFL.double_agent": [[27, 0, 0, "-", "AcquisitionFunction"], [32, 0, 0, "-", "Boundary"], [33, 0, 0, "-", "Extrapolator"], [34, 0, 0, "-", "Generator"], [35, 0, 0, "-", "MaskGrid"], [36, 0, 0, "-", "PairMetric"], [37, 0, 0, "-", "PhaseLabeler"], [38, 0, 0, "-", "Pipeline"], [39, 0, 0, "-", "PipelineContext"], [40, 0, 0, "-", "PipelineOp"], [41, 0, 0, "-", "Preprocessor"], [44, 0, 0, "-", "plotting"], [45, 0, 0, "-", "util"], [46, 0, 0, "-", "xarray_extensions"]], "AFL.double_agent.AcquisitionFunction": [[27, 5, 1, "", "AcquisitionError"], [27, 1, 1, "", "AcquisitionFunction"], [27, 1, 1, "", "MaxValueAF"], [27, 1, 1, "", "MultimodalMask_MaxValueAF"], [27, 1, 1, "", "PseudoUCB"], [27, 1, 1, "", "RandomAF"]], "AFL.double_agent.AcquisitionFunction.AcquisitionFunction": [[27, 2, 1, "", "calculate"], [27, 2, 1, "", "exclude_previous_samples"], [27, 2, 1, "", "get_next_samples"]], "AFL.double_agent.AcquisitionFunction.MaxValueAF": [[27, 2, 1, "", "calculate"]], "AFL.double_agent.AcquisitionFunction.MultimodalMask_MaxValueAF": [[27, 2, 1, "", "calculate"]], "AFL.double_agent.AcquisitionFunction.PseudoUCB": [[27, 2, 1, "", "calculate"]], "AFL.double_agent.AcquisitionFunction.RandomAF": [[27, 2, 1, "", "calculate"]], "AFL.double_agent.Boundary": [[32, 1, 1, "", "BoundaryScore"], [32, 1, 1, "", "ConcaveHull"]], "AFL.double_agent.Boundary.BoundaryScore": [[32, 2, 1, "", "calculate"]], "AFL.double_agent.Boundary.ConcaveHull": [[32, 2, 1, "", "calculate"]], "AFL.double_agent.Extrapolator": [[33, 1, 1, "", "DummyExtrapolator"], [33, 1, 1, "", "Extrapolator"], [33, 1, 1, "", "GaussianProcessClassifier"], [33, 1, 1, "", "GaussianProcessRegressor"]], "AFL.double_agent.Extrapolator.DummyExtrapolator": [[33, 2, 1, "", "calculate"]], "AFL.double_agent.Extrapolator.Extrapolator": [[33, 2, 1, "", "calculate"], [33, 2, 1, "", "plot"]], "AFL.double_agent.Extrapolator.GaussianProcessClassifier": [[33, 2, 1, "", "calculate"]], "AFL.double_agent.Extrapolator.GaussianProcessRegressor": [[33, 2, 1, "", "calculate"]], "AFL.double_agent.Generator": [[34, 1, 1, "", "BarycentricGrid"], [34, 1, 1, "", "CartesianGrid"], [34, 1, 1, "", "GaussianPoints"], [34, 1, 1, "", "Generator"]], "AFL.double_agent.Generator.BarycentricGrid": [[34, 2, 1, "", "calculate"]], "AFL.double_agent.Generator.CartesianGrid": [[34, 2, 1, "", "calculate"]], "AFL.double_agent.Generator.GaussianPoints": [[34, 2, 1, "", "calculate"]], "AFL.double_agent.Generator.Generator": [[34, 2, 1, "", "calculate"]], "AFL.double_agent.MaskGrid": [[35, 1, 1, "", "MaskGrid"]], "AFL.double_agent.MaskGrid.MaskGrid": [[35, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric": [[36, 1, 1, "", "CombineMetric"], [36, 1, 1, "", "Delaunay"], [36, 1, 1, "", "Distance"], [36, 1, 1, "", "Dummy"], [36, 1, 1, "", "PairMetric"], [36, 1, 1, "", "Similarity"]], "AFL.double_agent.PairMetric.CombineMetric": [[36, 2, 1, "", "calculate"], [36, 2, 1, "", "prod"], [36, 2, 1, "", "sum"]], "AFL.double_agent.PairMetric.Delaunay": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric.Distance": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric.Dummy": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.PairMetric.PairMetric": [[36, 2, 1, "", "apply_constraints"], [36, 2, 1, "", "calculate"], [36, 2, 1, "", "normalize1"], [36, 2, 1, "", "normalize2"]], "AFL.double_agent.PairMetric.Similarity": [[36, 2, 1, "", "calculate"]], "AFL.double_agent.PhaseLabeler": [[37, 1, 1, "", "AffinityPropagation"], [37, 1, 1, "", "GaussianMixtureModel"], [37, 1, 1, "", "PhaseLabeler"], [37, 1, 1, "", "SpectralClustering"]], "AFL.double_agent.PhaseLabeler.AffinityPropagation": [[37, 2, 1, "", "calculate"]], "AFL.double_agent.PhaseLabeler.GaussianMixtureModel": [[37, 2, 1, "", "calculate"]], "AFL.double_agent.PhaseLabeler.PhaseLabeler": [[37, 2, 1, "", "remap_labels_by_count"], [37, 2, 1, "", "silhouette"]], "AFL.double_agent.PhaseLabeler.SpectralClustering": [[37, 2, 1, "", "calculate"]], "AFL.double_agent.Pipeline": [[38, 1, 1, "", "Pipeline"]], "AFL.double_agent.Pipeline.Pipeline": [[38, 2, 1, "", "append"], [38, 2, 1, "", "calculate"], [38, 2, 1, "", "clear_outputs"], [38, 2, 1, "", "copy"], [38, 2, 1, "", "draw"], [38, 2, 1, "", "draw_plotly"], [38, 2, 1, "", "extend"], [38, 2, 1, "", "input_variables"], [38, 2, 1, "", "make_graph"], [38, 2, 1, "", "output_variables"], [38, 2, 1, "", "print"], [38, 2, 1, "", "print_code"], [38, 2, 1, "", "read"], [38, 2, 1, "", "search"], [38, 2, 1, "", "write"]], "AFL.double_agent.PipelineContext": [[39, 5, 1, "", "NoContextException"], [39, 1, 1, "", "PipelineContext"]], "AFL.double_agent.PipelineContext.PipelineContext": [[39, 6, 1, "", "contexts"], [39, 2, 1, "", "get_context"], [39, 2, 1, "", "get_contexts"]], "AFL.double_agent.PipelineOp": [[40, 1, 1, "", "PipelineOp"]], "AFL.double_agent.PipelineOp.PipelineOp": [[40, 2, 1, "", "add_to_dataset"], [40, 2, 1, "", "add_to_tiled"], [40, 2, 1, "", "calculate"], [40, 2, 1, "", "copy"], [40, 2, 1, "", "plot"]], "AFL.double_agent.Preprocessor": [[41, 1, 1, "", "ArrayToVars"], [41, 1, 1, "", "BarycentricToTernaryXY"], [41, 1, 1, "", "Destandardize"], [41, 1, 1, "", "Extrema"], [41, 1, 1, "", "Preprocessor"], [41, 1, 1, "", "SavgolFilter"], [41, 1, 1, "", "Standardize"], [41, 1, 1, "", "Subtract"], [41, 1, 1, "", "SubtractMin"], [41, 1, 1, "", "SympyTransform"], [41, 1, 1, "", "TernaryXYToBarycentric"], [41, 1, 1, "", "VarsToArray"], [41, 1, 1, "", "Zscale"], [41, 1, 1, "", "ZscaleError"]], "AFL.double_agent.Preprocessor.ArrayToVars": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.BarycentricToTernaryXY": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Destandardize": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Extrema": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Preprocessor": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.SavgolFilter": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Standardize": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Subtract": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.SubtractMin": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.SympyTransform": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.TernaryXYToBarycentric": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.VarsToArray": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.Zscale": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.Preprocessor.ZscaleError": [[41, 2, 1, "", "calculate"]], "AFL.double_agent.plotting": [[44, 3, 1, "", "plot_scatter_mpl"], [44, 3, 1, "", "plot_surface_mpl"]], "AFL.double_agent.util": [[45, 3, 1, "", "extract_parameters"], [45, 3, 1, "", "listify"]], "AFL.double_agent.xarray_extensions": [[46, 1, 1, "", "AFL_DataArrayTools"], [46, 1, 1, "", "AFL_DatasetTools"], [46, 1, 1, "", "CompositionTools"], [46, 1, 1, "", "LabelTools"], [46, 1, 1, "", "ScatteringTools"], [46, 1, 1, "", "Utilities"]], "AFL.double_agent.xarray_extensions.AFL_DatasetTools": [[46, 2, 1, "", "append"]], "AFL.double_agent.xarray_extensions.CompositionTools": [[46, 2, 1, "", "add_grid"], [46, 2, 1, "", "get"], [46, 2, 1, "", "get_grid"], [46, 2, 1, "", "get_grid_old"], [46, 2, 1, "", "get_range_scaled"], [46, 2, 1, "", "get_standard_scaled"], [46, 2, 1, "", "plot_3D"], [46, 2, 1, "", "plot_mask"], [46, 2, 1, "", "plot_scatter"], [46, 2, 1, "", "plot_surface"], [46, 2, 1, "", "ternary_to_xy"]], "AFL.double_agent.xarray_extensions.LabelTools": [[46, 2, 1, "", "make_default"], [46, 2, 1, "", "make_ordinal"]], "AFL.double_agent.xarray_extensions.ScatteringTools": [[46, 2, 1, "", "clean"], [46, 2, 1, "", "plot_linlin"], [46, 2, 1, "", "plot_loglog"], [46, 2, 1, "", "plot_logwaterfall"], [46, 2, 1, "", "plot_waterfall"]], "AFL.double_agent.xarray_extensions.Utilities": [[46, 2, 1, "", "preprocess_data"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:exception", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"explan": 0, "how": 1, "To": 1, "guid": 1, "afl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48], "agent": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 47, 48], "kei": 2, "featur": 2, "instal": [2, 50], "citat": 2, "content": 2, "acquisitionfunct": [3, 27], "modul": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46], "agentcli": [4, 28], "dowshampoo_sampledriv": 5, "ei_acquisitionfunct": 6, "gaussianprocess": 7, "hscedgaussianprocess": 8, "metric": 9, "multimodal_al_sampledriv": 10, "multimodal_agentdriv": 11, "phaselabel": [12, 37], "phasemap": 13, "phasemap_panda": 14, "sans_al_sampledriv": 15, "sas_al_sampledriv": 16, "sas_agentdriv": 17, "sas_grid_al_sampledriv": 18, "saxs_al_sampledriv": 19, "ucb_acquisitionfunct": 20, "watchdog": 21, "packag": 22, "core": [22, 43], "compon": [22, 43], "driver": [22, 43], "autom": 22, "data": 22, "process": 22, "reduce_usax": 23, "util": [24, 43, 45], "vsas_nodeck_al_sampledriv": 25, "xarray_extens": [26, 46], "double_ag": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46], "agentdriv": 29, "autosa": 30, "autosas_driv": 31, "boundari": 32, "extrapol": 33, "gener": 34, "maskgrid": 35, "pairmetr": 36, "pipelin": [38, 43], "usag": 38, "pipelinecontext": 39, "pipelineop": 40, "preprocessor": 41, "step": [41, 48], "tensorflowextrapol": 42, "api": [43, 47], "oper": 43, "apiserv": 43, "plot": 44, "refer": 47, "doubl": 47, "get": 48, "start": 48, "prerequisit": [48, 50], "quick": 48, "exampl": 48, "understand": 48, "next": 48, "tutori": 49, "setup": 50, "basic": 50, "develop": 50, "option": 50, "depend": 50, "from": 50, "specif": 50, "branch": 50, "offlin": 50, "troubleshoot": 50}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 58}, "alltitles": {"Explanations": [[0, "explanations"]], "How-To Guides": [[1, "how-to-guides"]], "AFL-agent": [[2, "afl-agent"]], "Key Features": [[2, "key-features"]], "Installation": [[2, "installation"]], "Citation": [[2, "citation"]], "Contents": [[2, "contents"]], "Contents:": [[2, null]], "AFL.agent.AcquisitionFunction module": [[3, "module-AFL.agent.AcquisitionFunction"]], "AFL.agent.AgentClient module": [[4, "afl-agent-agentclient-module"]], "AFL.agent.DowShampoo_SampleDriver module": [[5, "afl-agent-dowshampoo-sampledriver-module"]], "AFL.agent.EI_AcquisitionFunction module": [[6, "afl-agent-ei-acquisitionfunction-module"]], "AFL.agent.GaussianProcess module": [[7, "afl-agent-gaussianprocess-module"]], "AFL.agent.HscedGaussianProcess module": [[8, "afl-agent-hscedgaussianprocess-module"]], "AFL.agent.Metric module": [[9, "afl-agent-metric-module"]], "AFL.agent.Multimodal_AL_SampleDriver module": [[10, "afl-agent-multimodal-al-sampledriver-module"]], "AFL.agent.Multimodal_AgentDriver module": [[11, "afl-agent-multimodal-agentdriver-module"]], "AFL.agent.PhaseLabeler module": [[12, "afl-agent-phaselabeler-module"]], "AFL.agent.PhaseMap module": [[13, "afl-agent-phasemap-module"]], "AFL.agent.PhaseMap_pandas module": [[14, "afl-agent-phasemap-pandas-module"]], "AFL.agent.SANS_AL_SampleDriver module": [[15, "afl-agent-sans-al-sampledriver-module"]], "AFL.agent.SAS_AL_SampleDriver module": [[16, "afl-agent-sas-al-sampledriver-module"]], "AFL.agent.SAS_AgentDriver module": [[17, "afl-agent-sas-agentdriver-module"]], "AFL.agent.SAS_Grid_AL_SampleDriver module": [[18, "afl-agent-sas-grid-al-sampledriver-module"]], "AFL.agent.SAXS_AL_SampleDriver module": [[19, "afl-agent-saxs-al-sampledriver-module"]], "AFL.agent.UCB_AcquisitionFunction module": [[20, "afl-agent-ucb-acquisitionfunction-module"]], "AFL.agent.WatchDog module": [[21, "afl-agent-watchdog-module"]], "AFL.agent package": [[22, "afl-agent-package"]], "Core Components": [[22, "core-components"], [43, "core-components"]], "Drivers and Automation": [[22, "drivers-and-automation"]], "Data Processing": [[22, "data-processing"]], "AFL.agent.reduce_usaxs module": [[23, "afl-agent-reduce-usaxs-module"]], "AFL.agent.util module": [[24, "afl-agent-util-module"]], "AFL.agent.vSAS_NoDeck_AL_SampleDriver module": [[25, "afl-agent-vsas-nodeck-al-sampledriver-module"]], "AFL.agent.xarray_extensions module": [[26, "afl-agent-xarray-extensions-module"]], "AFL.double_agent.AcquisitionFunction module": [[27, "module-AFL.double_agent.AcquisitionFunction"]], "AFL.double_agent.AgentClient module": [[28, "afl-double-agent-agentclient-module"]], "AFL.double_agent.AgentDriver module": [[29, "afl-double-agent-agentdriver-module"]], "AFL.double_agent.AutoSAS module": [[30, "afl-double-agent-autosas-module"]], "AFL.double_agent.AutoSAS_Driver module": [[31, "afl-double-agent-autosas-driver-module"]], "AFL.double_agent.Boundary module": [[32, "module-AFL.double_agent.Boundary"]], "AFL.double_agent.Extrapolator module": [[33, "afl-double-agent-extrapolator-module"]], "AFL.double_agent.Generator module": [[34, "afl-double-agent-generator-module"]], "AFL.double_agent.MaskGrid module": [[35, "afl-double-agent-maskgrid-module"]], "AFL.double_agent.PairMetric module": [[36, "afl-double-agent-pairmetric-module"]], "AFL.double_agent.PhaseLabeler module": [[37, "afl-double-agent-phaselabeler-module"]], "AFL.double_agent.Pipeline module": [[38, "afl-double-agent-pipeline-module"]], "Usage": [[38, "usage"]], "AFL.double_agent.PipelineContext module": [[39, "afl-double-agent-pipelinecontext-module"]], "AFL.double_agent.PipelineOp module": [[40, "afl-double-agent-pipelineop-module"]], "AFL.double_agent.Preprocessor module": [[41, "module-AFL.double_agent.Preprocessor"]], "Steps": [[41, "steps"]], "AFL.double_agent.TensorFlowExtrapolator module": [[42, "afl-double-agent-tensorflowextrapolator-module"]], "AFL.double_agent API": [[43, "afl-double-agent-api"]], "Pipeline Operations": [[43, "pipeline-operations"]], "Utilities": [[43, "utilities"]], "APIServer Drivers": [[43, "apiserver-drivers"]], "AFL.double_agent.plotting module": [[44, "afl-double-agent-plotting-module"]], "AFL.double_agent.util module": [[45, "module-AFL.double_agent.util"]], "AFL.double_agent.xarray_extensions module": [[46, "afl-double-agent-xarray-extensions-module"]], "Reference": [[47, "reference"]], "Double Agent API": [[47, "double-agent-api"]], "Agent API": [[47, "agent-api"]], "Getting Started with AFL-agent": [[48, "getting-started-with-afl-agent"]], "Prerequisites": [[48, "prerequisites"], [50, "prerequisites"]], "Quick Start Example": [[48, "quick-start-example"]], "Understanding the Example": [[48, "understanding-the-example"]], "Next Steps": [[48, "next-steps"]], "Tutorials": [[49, "tutorials"]], "Setup": [[50, "setup"]], "Basic Installation": [[50, "basic-installation"]], "Development Installation": [[50, "development-installation"]], "Optional Dependencies": [[50, "optional-dependencies"]], "Installation from a Specific Branch": [[50, "installation-from-a-specific-branch"]], "Offline Installation": [[50, "offline-installation"]], "Troubleshooting": [[50, "troubleshooting"]]}, "indexentries": {"afl.agent.acquisitionfunction": [[3, "module-AFL.agent.AcquisitionFunction"]], "acquisition (class in afl.agent.acquisitionfunction)": [[3, "AFL.agent.AcquisitionFunction.Acquisition"]], "iterationcombined (class in afl.agent.acquisitionfunction)": [[3, "AFL.agent.AcquisitionFunction.IterationCombined"]], "lowestdensity (class in afl.agent.acquisitionfunction)": [[3, "AFL.agent.AcquisitionFunction.LowestDensity"]], "random (class in afl.agent.acquisitionfunction)": [[3, "AFL.agent.AcquisitionFunction.Random"]], "variance (class in afl.agent.acquisitionfunction)": [[3, "AFL.agent.AcquisitionFunction.Variance"]], "add_exclusion() (afl.agent.acquisitionfunction.acquisition method)": [[3, "AFL.agent.AcquisitionFunction.Acquisition.add_exclusion"]], "calculate_metric() (afl.agent.acquisitionfunction.iterationcombined method)": [[3, "AFL.agent.AcquisitionFunction.IterationCombined.calculate_metric"]], "calculate_metric() (afl.agent.acquisitionfunction.lowestdensity method)": [[3, "AFL.agent.AcquisitionFunction.LowestDensity.calculate_metric"]], "calculate_metric() (afl.agent.acquisitionfunction.random method)": [[3, "AFL.agent.AcquisitionFunction.Random.calculate_metric"]], "calculate_metric() (afl.agent.acquisitionfunction.variance method)": [[3, "AFL.agent.AcquisitionFunction.Variance.calculate_metric"]], "copy() (afl.agent.acquisitionfunction.acquisition method)": [[3, "AFL.agent.AcquisitionFunction.Acquisition.copy"]], "execute() (afl.agent.acquisitionfunction.acquisition method)": [[3, "AFL.agent.AcquisitionFunction.Acquisition.execute"]], "gauss2d() (in module afl.agent.acquisitionfunction)": [[3, "AFL.agent.AcquisitionFunction.gauss2d"]], "get_next_sample() (afl.agent.acquisitionfunction.acquisition method)": [[3, "AFL.agent.AcquisitionFunction.Acquisition.get_next_sample"]], "module": [[3, "module-AFL.agent.AcquisitionFunction"], [6, "module-AFL.agent.EI_AcquisitionFunction"], [9, "module-AFL.agent.Metric"], [12, "module-AFL.agent.PhaseLabeler"], [13, "module-AFL.agent.PhaseMap"], [14, "module-AFL.agent.PhaseMap_pandas"], [20, "module-AFL.agent.UCB_AcquisitionFunction"], [23, "module-AFL.agent.reduce_usaxs"], [24, "module-AFL.agent.util"], [26, "module-AFL.agent.xarray_extensions"], [27, "module-AFL.double_agent.AcquisitionFunction"], [32, "module-AFL.double_agent.Boundary"], [33, "module-AFL.double_agent.Extrapolator"], [34, "module-AFL.double_agent.Generator"], [35, "module-AFL.double_agent.MaskGrid"], [36, "module-AFL.double_agent.PairMetric"], [37, "module-AFL.double_agent.PhaseLabeler"], [38, "module-AFL.double_agent.Pipeline"], [39, "module-AFL.double_agent.PipelineContext"], [40, "module-AFL.double_agent.PipelineOp"], [41, "module-AFL.double_agent.Preprocessor"], [44, "module-AFL.double_agent.plotting"], [45, "module-AFL.double_agent.util"], [46, "module-AFL.double_agent.xarray_extensions"]], "plot() (afl.agent.acquisitionfunction.acquisition method)": [[3, "AFL.agent.AcquisitionFunction.Acquisition.plot"]], "reset_phasemap() (afl.agent.acquisitionfunction.acquisition method)": [[3, "AFL.agent.AcquisitionFunction.Acquisition.reset_phasemap"]], "reset_phasemap() (afl.agent.acquisitionfunction.iterationcombined method)": [[3, "AFL.agent.AcquisitionFunction.IterationCombined.reset_phasemap"]], "afl.agent.ei_acquisitionfunction": [[6, "module-AFL.agent.EI_AcquisitionFunction"]], "acquisition (class in afl.agent.ei_acquisitionfunction)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition"]], "ei (class in afl.agent.ei_acquisitionfunction)": [[6, "AFL.agent.EI_AcquisitionFunction.EI"]], "add_exclusion() (afl.agent.ei_acquisitionfunction.acquisition method)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition.add_exclusion"]], "calculate_metric() (afl.agent.ei_acquisitionfunction.ei method)": [[6, "AFL.agent.EI_AcquisitionFunction.EI.calculate_metric"]], "calculate_metric() (afl.agent.ei_acquisitionfunction.pseudoei method)": [[6, "AFL.agent.EI_AcquisitionFunction.pseudoEI.calculate_metric"]], "copy() (afl.agent.ei_acquisitionfunction.acquisition method)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition.copy"]], "execute() (afl.agent.ei_acquisitionfunction.acquisition method)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition.execute"]], "gauss2d() (in module afl.agent.ei_acquisitionfunction)": [[6, "AFL.agent.EI_AcquisitionFunction.gauss2d"]], "get_next_sample() (afl.agent.ei_acquisitionfunction.acquisition method)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition.get_next_sample"]], "plot() (afl.agent.ei_acquisitionfunction.acquisition method)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition.plot"]], "pseudoei (class in afl.agent.ei_acquisitionfunction)": [[6, "AFL.agent.EI_AcquisitionFunction.pseudoEI"]], "reset_phasemap() (afl.agent.ei_acquisitionfunction.acquisition method)": [[6, "AFL.agent.EI_AcquisitionFunction.Acquisition.reset_phasemap"]], "afl.agent.metric": [[9, "module-AFL.agent.Metric"]], "delaunay (class in afl.agent.metric)": [[9, "AFL.agent.Metric.Delaunay"]], "distance (class in afl.agent.metric)": [[9, "AFL.agent.Metric.Distance"]], "dummy (class in afl.agent.metric)": [[9, "AFL.agent.Metric.Dummy"]], "metric (class in afl.agent.metric)": [[9, "AFL.agent.Metric.Metric"]], "multimetric (class in afl.agent.metric)": [[9, "AFL.agent.Metric.MultiMetric"]], "similarity (class in afl.agent.metric)": [[9, "AFL.agent.Metric.Similarity"]], "apply_constraints() (afl.agent.metric.metric method)": [[9, "AFL.agent.Metric.Metric.apply_constraints"]], "calculate() (afl.agent.metric.delaunay method)": [[9, "AFL.agent.Metric.Delaunay.calculate"]], "calculate() (afl.agent.metric.distance method)": [[9, "AFL.agent.Metric.Distance.calculate"]], "calculate() (afl.agent.metric.dummy method)": [[9, "AFL.agent.Metric.Dummy.calculate"]], "calculate() (afl.agent.metric.metric method)": [[9, "AFL.agent.Metric.Metric.calculate"]], "calculate() (afl.agent.metric.multimetric method)": [[9, "AFL.agent.Metric.MultiMetric.calculate"]], "calculate() (afl.agent.metric.similarity method)": [[9, "AFL.agent.Metric.Similarity.calculate"]], "copy() (afl.agent.metric.metric method)": [[9, "AFL.agent.Metric.Metric.copy"]], "listify() (in module afl.agent.metric)": [[9, "AFL.agent.Metric.listify"]], "normalize1() (afl.agent.metric.metric method)": [[9, "AFL.agent.Metric.Metric.normalize1"]], "normalize2() (afl.agent.metric.metric method)": [[9, "AFL.agent.Metric.Metric.normalize2"]], "prod() (afl.agent.metric.multimetric method)": [[9, "AFL.agent.Metric.MultiMetric.prod"]], "sum() (afl.agent.metric.multimetric method)": [[9, "AFL.agent.Metric.MultiMetric.sum"]], "to_dict() (afl.agent.metric.metric method)": [[9, "AFL.agent.Metric.Metric.to_dict"]], "to_dict() (afl.agent.metric.multimetric method)": [[9, "AFL.agent.Metric.MultiMetric.to_dict"]], "update_name() (afl.agent.metric.multimetric method)": [[9, "AFL.agent.Metric.MultiMetric.update_name"]], "afl.agent.phaselabeler": [[12, "module-AFL.agent.PhaseLabeler"]], "affinitypropagation (class in afl.agent.phaselabeler)": [[12, "AFL.agent.PhaseLabeler.AffinityPropagation"]], "dbscan (class in afl.agent.phaselabeler)": [[12, "AFL.agent.PhaseLabeler.DBSCAN"]], "gaussianmixturemodel (class in afl.agent.phaselabeler)": [[12, "AFL.agent.PhaseLabeler.GaussianMixtureModel"]], "kerasclassifier (class in afl.agent.phaselabeler)": [[12, "AFL.agent.PhaseLabeler.KerasClassifier"]], "phaselabeler (class in afl.agent.phaselabeler)": [[12, "AFL.agent.PhaseLabeler.PhaseLabeler"]], "spectralclustering (class in afl.agent.phaselabeler)": [[12, "AFL.agent.PhaseLabeler.SpectralClustering"]], "copy() (afl.agent.phaselabeler.phaselabeler method)": [[12, "AFL.agent.PhaseLabeler.PhaseLabeler.copy"]], "label() (afl.agent.phaselabeler.affinitypropagation method)": [[12, "AFL.agent.PhaseLabeler.AffinityPropagation.label"]], "label() (afl.agent.phaselabeler.dbscan method)": [[12, "AFL.agent.PhaseLabeler.DBSCAN.label"]], "label() (afl.agent.phaselabeler.gaussianmixturemodel method)": [[12, "AFL.agent.PhaseLabeler.GaussianMixtureModel.label"]], "label() (afl.agent.phaselabeler.kerasclassifier method)": [[12, "AFL.agent.PhaseLabeler.KerasClassifier.label"]], "label() (afl.agent.phaselabeler.phaselabeler method)": [[12, "AFL.agent.PhaseLabeler.PhaseLabeler.label"]], "label() (afl.agent.phaselabeler.spectralclustering method)": [[12, "AFL.agent.PhaseLabeler.SpectralClustering.label"]], "remap_labels_by_count() (afl.agent.phaselabeler.phaselabeler method)": [[12, "AFL.agent.PhaseLabeler.PhaseLabeler.remap_labels_by_count"]], "silhouette() (afl.agent.phaselabeler.phaselabeler method)": [[12, "AFL.agent.PhaseLabeler.PhaseLabeler.silhouette"]], "afl.agent.phasemap": [[13, "module-AFL.agent.PhaseMap"]], "afl.agent.phasemap_pandas": [[14, "module-AFL.agent.PhaseMap_pandas"]], "phasemap (class in afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap"]], "phasemapmodel (class in afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapModel"]], "phasemapview_mpl (class in afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL"]], "append() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.append"]], "append() (afl.agent.phasemap_pandas.phasemapmodel method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapModel.append"]], "cart2ternary() (in module afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.cart2ternary"]], "components (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.components"]], "composition_grid() (in module afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.composition_grid"]], "compositions (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.compositions"]], "copy() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.copy"]], "format_plot_ternary() (in module afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.format_plot_ternary"]], "label_encoder (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.label_encoder"]], "labels (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.labels"]], "labels_ordinal (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.labels_ordinal"]], "lines() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.lines"]], "load() (afl.agent.phasemap_pandas.phasemap class method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.load"]], "make_axes() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.make_axes"]], "measurements (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.measurements"]], "ncomponents (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.ncomponents"]], "phasemap_grid_factory() (in module afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.phasemap_grid_factory"]], "plot() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.plot"]], "project() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.project"]], "rescale_compositions() (in module afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.rescale_compositions"]], "save() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.save"]], "scatter() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.scatter"]], "scatter_ternary() (afl.agent.phasemap_pandas.phasemapview_mpl method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMapView_MPL.scatter_ternary"]], "shape (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.shape"]], "size (afl.agent.phasemap_pandas.phasemap property)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.size"]], "slice() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.slice"]], "ternary2cart() (in module afl.agent.phasemap_pandas)": [[14, "AFL.agent.PhaseMap_pandas.ternary2cart"]], "update_encoder() (afl.agent.phasemap_pandas.phasemap method)": [[14, "AFL.agent.PhaseMap_pandas.PhaseMap.update_encoder"]], "afl.agent.ucb_acquisitionfunction": [[20, "module-AFL.agent.UCB_AcquisitionFunction"]], "acquisition (class in afl.agent.ucb_acquisitionfunction)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition"]], "add_exclusion() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition.add_exclusion"]], "calculate_metric() (afl.agent.ucb_acquisitionfunction.pseudoucb method)": [[20, "AFL.agent.UCB_AcquisitionFunction.pseudoUCB.calculate_metric"]], "copy() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition.copy"]], "execute() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition.execute"]], "gauss2d() (in module afl.agent.ucb_acquisitionfunction)": [[20, "AFL.agent.UCB_AcquisitionFunction.gauss2d"]], "get_next_sample() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition.get_next_sample"]], "get_next_sample_passthrough() (in module afl.agent.ucb_acquisitionfunction)": [[20, "AFL.agent.UCB_AcquisitionFunction.get_next_sample_passthrough"]], "plot() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition.plot"]], "pseudoucb (class in afl.agent.ucb_acquisitionfunction)": [[20, "AFL.agent.UCB_AcquisitionFunction.pseudoUCB"]], "reset_phasemap() (afl.agent.ucb_acquisitionfunction.acquisition method)": [[20, "AFL.agent.UCB_AcquisitionFunction.Acquisition.reset_phasemap"]], "afl.agent.reduce_usaxs": [[23, "module-AFL.agent.reduce_usaxs"]], "amplifier_corrections() (in module afl.agent.reduce_usaxs)": [[23, "AFL.agent.reduce_usaxs.amplifier_corrections"]], "calc_r_q() (in module afl.agent.reduce_usaxs)": [[23, "AFL.agent.reduce_usaxs.calc_R_Q"]], "centroid() (in module afl.agent.reduce_usaxs)": [[23, "AFL.agent.reduce_usaxs.centroid"]], "reduce_uascan() (in module afl.agent.reduce_usaxs)": [[23, "AFL.agent.reduce_usaxs.reduce_uascan"]], "remove_masked_data() (in module afl.agent.reduce_usaxs)": [[23, "AFL.agent.reduce_usaxs.remove_masked_data"]], "afl.agent.util": [[24, "module-AFL.agent.util"]], "composition_grid() (in module afl.agent.util)": [[24, "AFL.agent.util.composition_grid"]], "composition_grid_ternary() (in module afl.agent.util)": [[24, "AFL.agent.util.composition_grid_ternary"]], "mpl_format_ternary() (in module afl.agent.util)": [[24, "AFL.agent.util.mpl_format_ternary"]], "ternary_to_xy() (in module afl.agent.util)": [[24, "AFL.agent.util.ternary_to_xy"]], "afl.agent.xarray_extensions": [[26, "module-AFL.agent.xarray_extensions"]], "afl_dataarraytools (class in afl.agent.xarray_extensions)": [[26, "AFL.agent.xarray_extensions.AFL_DataArrayTools"]], "afl_datasettools (class in afl.agent.xarray_extensions)": [[26, "AFL.agent.xarray_extensions.AFL_DatasetTools"]], "compositiontools (class in afl.agent.xarray_extensions)": [[26, "AFL.agent.xarray_extensions.CompositionTools"]], "labeltools (class in afl.agent.xarray_extensions)": [[26, "AFL.agent.xarray_extensions.LabelTools"]], "scatteringtools (class in afl.agent.xarray_extensions)": [[26, "AFL.agent.xarray_extensions.ScatteringTools"]], "utilities (class in afl.agent.xarray_extensions)": [[26, "AFL.agent.xarray_extensions.Utilities"]], "add_grid() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.add_grid"]], "append() (afl.agent.xarray_extensions.afl_datasettools method)": [[26, "AFL.agent.xarray_extensions.AFL_DatasetTools.append"]], "clean() (afl.agent.xarray_extensions.scatteringtools method)": [[26, "AFL.agent.xarray_extensions.ScatteringTools.clean"]], "get() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.get"]], "get_grid() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.get_grid"]], "get_grid_old() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.get_grid_old"]], "get_range_scaled() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.get_range_scaled"]], "get_standard_scaled() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.get_standard_scaled"]], "make_default() (afl.agent.xarray_extensions.labeltools method)": [[26, "AFL.agent.xarray_extensions.LabelTools.make_default"]], "make_ordinal() (afl.agent.xarray_extensions.labeltools method)": [[26, "AFL.agent.xarray_extensions.LabelTools.make_ordinal"]], "plot_3d() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.plot_3D"]], "plot_continuous() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.plot_continuous"]], "plot_discrete() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.plot_discrete"]], "plot_linlin() (afl.agent.xarray_extensions.scatteringtools method)": [[26, "AFL.agent.xarray_extensions.ScatteringTools.plot_linlin"]], "plot_loglog() (afl.agent.xarray_extensions.scatteringtools method)": [[26, "AFL.agent.xarray_extensions.ScatteringTools.plot_loglog"]], "plot_logwaterfall() (afl.agent.xarray_extensions.scatteringtools method)": [[26, "AFL.agent.xarray_extensions.ScatteringTools.plot_logwaterfall"]], "plot_mask() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.plot_mask"]], "plot_scatter() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.plot_scatter"]], "plot_surface() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.plot_surface"]], "plot_waterfall() (afl.agent.xarray_extensions.scatteringtools method)": [[26, "AFL.agent.xarray_extensions.ScatteringTools.plot_waterfall"]], "preprocess_data() (afl.agent.xarray_extensions.utilities method)": [[26, "AFL.agent.xarray_extensions.Utilities.preprocess_data"]], "ternary_to_xy() (afl.agent.xarray_extensions.compositiontools method)": [[26, "AFL.agent.xarray_extensions.CompositionTools.ternary_to_xy"]], "afl.double_agent.acquisitionfunction": [[27, "module-AFL.double_agent.AcquisitionFunction"]], "acquisitionerror": [[27, "AFL.double_agent.AcquisitionFunction.AcquisitionError"]], "acquisitionfunction (class in afl.double_agent.acquisitionfunction)": [[27, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction"]], "maxvalueaf (class in afl.double_agent.acquisitionfunction)": [[27, "AFL.double_agent.AcquisitionFunction.MaxValueAF"]], "multimodalmask_maxvalueaf (class in afl.double_agent.acquisitionfunction)": [[27, "AFL.double_agent.AcquisitionFunction.MultimodalMask_MaxValueAF"]], "pseudoucb (class in afl.double_agent.acquisitionfunction)": [[27, "AFL.double_agent.AcquisitionFunction.PseudoUCB"]], "randomaf (class in afl.double_agent.acquisitionfunction)": [[27, "AFL.double_agent.AcquisitionFunction.RandomAF"]], "calculate() (afl.double_agent.acquisitionfunction.acquisitionfunction method)": [[27, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.maxvalueaf method)": [[27, "AFL.double_agent.AcquisitionFunction.MaxValueAF.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.multimodalmask_maxvalueaf method)": [[27, "AFL.double_agent.AcquisitionFunction.MultimodalMask_MaxValueAF.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.pseudoucb method)": [[27, "AFL.double_agent.AcquisitionFunction.PseudoUCB.calculate"]], "calculate() (afl.double_agent.acquisitionfunction.randomaf method)": [[27, "AFL.double_agent.AcquisitionFunction.RandomAF.calculate"]], "exclude_previous_samples() (afl.double_agent.acquisitionfunction.acquisitionfunction method)": [[27, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction.exclude_previous_samples"]], "get_next_samples() (afl.double_agent.acquisitionfunction.acquisitionfunction method)": [[27, "AFL.double_agent.AcquisitionFunction.AcquisitionFunction.get_next_samples"]], "afl.double_agent.boundary": [[32, "module-AFL.double_agent.Boundary"]], "boundaryscore (class in afl.double_agent.boundary)": [[32, "AFL.double_agent.Boundary.BoundaryScore"]], "concavehull (class in afl.double_agent.boundary)": [[32, "AFL.double_agent.Boundary.ConcaveHull"]], "calculate() (afl.double_agent.boundary.boundaryscore method)": [[32, "AFL.double_agent.Boundary.BoundaryScore.calculate"]], "calculate() (afl.double_agent.boundary.concavehull method)": [[32, "AFL.double_agent.Boundary.ConcaveHull.calculate"]], "afl.double_agent.extrapolator": [[33, "module-AFL.double_agent.Extrapolator"]], "dummyextrapolator (class in afl.double_agent.extrapolator)": [[33, "AFL.double_agent.Extrapolator.DummyExtrapolator"]], "extrapolator (class in afl.double_agent.extrapolator)": [[33, "AFL.double_agent.Extrapolator.Extrapolator"]], "gaussianprocessclassifier (class in afl.double_agent.extrapolator)": [[33, "AFL.double_agent.Extrapolator.GaussianProcessClassifier"]], "gaussianprocessregressor (class in afl.double_agent.extrapolator)": [[33, "AFL.double_agent.Extrapolator.GaussianProcessRegressor"]], "calculate() (afl.double_agent.extrapolator.dummyextrapolator method)": [[33, "AFL.double_agent.Extrapolator.DummyExtrapolator.calculate"]], "calculate() (afl.double_agent.extrapolator.extrapolator method)": [[33, "AFL.double_agent.Extrapolator.Extrapolator.calculate"]], "calculate() (afl.double_agent.extrapolator.gaussianprocessclassifier method)": [[33, "AFL.double_agent.Extrapolator.GaussianProcessClassifier.calculate"]], "calculate() (afl.double_agent.extrapolator.gaussianprocessregressor method)": [[33, "AFL.double_agent.Extrapolator.GaussianProcessRegressor.calculate"]], "plot() (afl.double_agent.extrapolator.extrapolator method)": [[33, "AFL.double_agent.Extrapolator.Extrapolator.plot"]], "afl.double_agent.generator": [[34, "module-AFL.double_agent.Generator"]], "barycentricgrid (class in afl.double_agent.generator)": [[34, "AFL.double_agent.Generator.BarycentricGrid"]], "cartesiangrid (class in afl.double_agent.generator)": [[34, "AFL.double_agent.Generator.CartesianGrid"]], "gaussianpoints (class in afl.double_agent.generator)": [[34, "AFL.double_agent.Generator.GaussianPoints"]], "generator (class in afl.double_agent.generator)": [[34, "AFL.double_agent.Generator.Generator"]], "calculate() (afl.double_agent.generator.barycentricgrid method)": [[34, "AFL.double_agent.Generator.BarycentricGrid.calculate"]], "calculate() (afl.double_agent.generator.cartesiangrid method)": [[34, "AFL.double_agent.Generator.CartesianGrid.calculate"]], "calculate() (afl.double_agent.generator.gaussianpoints method)": [[34, "AFL.double_agent.Generator.GaussianPoints.calculate"]], "calculate() (afl.double_agent.generator.generator method)": [[34, "AFL.double_agent.Generator.Generator.calculate"]], "afl.double_agent.maskgrid": [[35, "module-AFL.double_agent.MaskGrid"]], "maskgrid (class in afl.double_agent.maskgrid)": [[35, "AFL.double_agent.MaskGrid.MaskGrid"]], "calculate() (afl.double_agent.maskgrid.maskgrid method)": [[35, "AFL.double_agent.MaskGrid.MaskGrid.calculate"]], "afl.double_agent.pairmetric": [[36, "module-AFL.double_agent.PairMetric"]], "combinemetric (class in afl.double_agent.pairmetric)": [[36, "AFL.double_agent.PairMetric.CombineMetric"]], "delaunay (class in afl.double_agent.pairmetric)": [[36, "AFL.double_agent.PairMetric.Delaunay"]], "distance (class in afl.double_agent.pairmetric)": [[36, "AFL.double_agent.PairMetric.Distance"]], "dummy (class in afl.double_agent.pairmetric)": [[36, "AFL.double_agent.PairMetric.Dummy"]], "pairmetric (class in afl.double_agent.pairmetric)": [[36, "AFL.double_agent.PairMetric.PairMetric"]], "similarity (class in afl.double_agent.pairmetric)": [[36, "AFL.double_agent.PairMetric.Similarity"]], "apply_constraints() (afl.double_agent.pairmetric.pairmetric method)": [[36, "AFL.double_agent.PairMetric.PairMetric.apply_constraints"]], "calculate() (afl.double_agent.pairmetric.combinemetric method)": [[36, "AFL.double_agent.PairMetric.CombineMetric.calculate"]], "calculate() (afl.double_agent.pairmetric.delaunay method)": [[36, "AFL.double_agent.PairMetric.Delaunay.calculate"]], "calculate() (afl.double_agent.pairmetric.distance method)": [[36, "AFL.double_agent.PairMetric.Distance.calculate"]], "calculate() (afl.double_agent.pairmetric.dummy method)": [[36, "AFL.double_agent.PairMetric.Dummy.calculate"]], "calculate() (afl.double_agent.pairmetric.pairmetric method)": [[36, "AFL.double_agent.PairMetric.PairMetric.calculate"]], "calculate() (afl.double_agent.pairmetric.similarity method)": [[36, "AFL.double_agent.PairMetric.Similarity.calculate"]], "normalize1() (afl.double_agent.pairmetric.pairmetric method)": [[36, "AFL.double_agent.PairMetric.PairMetric.normalize1"]], "normalize2() (afl.double_agent.pairmetric.pairmetric method)": [[36, "AFL.double_agent.PairMetric.PairMetric.normalize2"]], "prod() (afl.double_agent.pairmetric.combinemetric method)": [[36, "AFL.double_agent.PairMetric.CombineMetric.prod"]], "sum() (afl.double_agent.pairmetric.combinemetric method)": [[36, "AFL.double_agent.PairMetric.CombineMetric.sum"]], "afl.double_agent.phaselabeler": [[37, "module-AFL.double_agent.PhaseLabeler"]], "affinitypropagation (class in afl.double_agent.phaselabeler)": [[37, "AFL.double_agent.PhaseLabeler.AffinityPropagation"]], "gaussianmixturemodel (class in afl.double_agent.phaselabeler)": [[37, "AFL.double_agent.PhaseLabeler.GaussianMixtureModel"]], "phaselabeler (class in afl.double_agent.phaselabeler)": [[37, "AFL.double_agent.PhaseLabeler.PhaseLabeler"]], "spectralclustering (class in afl.double_agent.phaselabeler)": [[37, "AFL.double_agent.PhaseLabeler.SpectralClustering"]], "calculate() (afl.double_agent.phaselabeler.affinitypropagation method)": [[37, "AFL.double_agent.PhaseLabeler.AffinityPropagation.calculate"]], "calculate() (afl.double_agent.phaselabeler.gaussianmixturemodel method)": [[37, "AFL.double_agent.PhaseLabeler.GaussianMixtureModel.calculate"]], "calculate() (afl.double_agent.phaselabeler.spectralclustering method)": [[37, "AFL.double_agent.PhaseLabeler.SpectralClustering.calculate"]], "remap_labels_by_count() (afl.double_agent.phaselabeler.phaselabeler method)": [[37, "AFL.double_agent.PhaseLabeler.PhaseLabeler.remap_labels_by_count"]], "silhouette() (afl.double_agent.phaselabeler.phaselabeler method)": [[37, "AFL.double_agent.PhaseLabeler.PhaseLabeler.silhouette"]], "afl.double_agent.pipeline": [[38, "module-AFL.double_agent.Pipeline"]], "pipeline (class in afl.double_agent.pipeline)": [[38, "AFL.double_agent.Pipeline.Pipeline"]], "append() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.append"]], "calculate() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.calculate"]], "clear_outputs() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.clear_outputs"]], "copy() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.copy"]], "draw() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.draw"]], "draw_plotly() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.draw_plotly"]], "extend() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.extend"]], "input_variables() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.input_variables"]], "make_graph() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.make_graph"]], "output_variables() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.output_variables"]], "print() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.print"]], "print_code() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.print_code"]], "read() (afl.double_agent.pipeline.pipeline static method)": [[38, "AFL.double_agent.Pipeline.Pipeline.read"]], "search() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.search"]], "write() (afl.double_agent.pipeline.pipeline method)": [[38, "AFL.double_agent.Pipeline.Pipeline.write"]], "afl.double_agent.pipelinecontext": [[39, "module-AFL.double_agent.PipelineContext"]], "nocontextexception": [[39, "AFL.double_agent.PipelineContext.NoContextException"]], "pipelinecontext (class in afl.double_agent.pipelinecontext)": [[39, "AFL.double_agent.PipelineContext.PipelineContext"]], "contexts (afl.double_agent.pipelinecontext.pipelinecontext attribute)": [[39, "AFL.double_agent.PipelineContext.PipelineContext.contexts"]], "get_context() (afl.double_agent.pipelinecontext.pipelinecontext class method)": [[39, "AFL.double_agent.PipelineContext.PipelineContext.get_context"]], "get_contexts() (afl.double_agent.pipelinecontext.pipelinecontext class method)": [[39, "AFL.double_agent.PipelineContext.PipelineContext.get_contexts"]], "afl.double_agent.pipelineop": [[40, "module-AFL.double_agent.PipelineOp"]], "pipelineop (class in afl.double_agent.pipelineop)": [[40, "AFL.double_agent.PipelineOp.PipelineOp"]], "add_to_dataset() (afl.double_agent.pipelineop.pipelineop method)": [[40, "AFL.double_agent.PipelineOp.PipelineOp.add_to_dataset"]], "add_to_tiled() (afl.double_agent.pipelineop.pipelineop method)": [[40, "AFL.double_agent.PipelineOp.PipelineOp.add_to_tiled"]], "calculate() (afl.double_agent.pipelineop.pipelineop method)": [[40, "AFL.double_agent.PipelineOp.PipelineOp.calculate"]], "copy() (afl.double_agent.pipelineop.pipelineop method)": [[40, "AFL.double_agent.PipelineOp.PipelineOp.copy"]], "plot() (afl.double_agent.pipelineop.pipelineop method)": [[40, "AFL.double_agent.PipelineOp.PipelineOp.plot"]], "afl.double_agent.preprocessor": [[41, "module-AFL.double_agent.Preprocessor"]], "arraytovars (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.ArrayToVars"]], "barycentrictoternaryxy (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.BarycentricToTernaryXY"]], "destandardize (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.Destandardize"]], "extrema (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.Extrema"]], "preprocessor (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.Preprocessor"]], "savgolfilter (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.SavgolFilter"]], "standardize (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.Standardize"]], "subtract (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.Subtract"]], "subtractmin (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.SubtractMin"]], "sympytransform (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.SympyTransform"]], "ternaryxytobarycentric (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.TernaryXYToBarycentric"]], "varstoarray (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.VarsToArray"]], "zscale (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.Zscale"]], "zscaleerror (class in afl.double_agent.preprocessor)": [[41, "AFL.double_agent.Preprocessor.ZscaleError"]], "calculate() (afl.double_agent.preprocessor.arraytovars method)": [[41, "AFL.double_agent.Preprocessor.ArrayToVars.calculate"]], "calculate() (afl.double_agent.preprocessor.barycentrictoternaryxy method)": [[41, "AFL.double_agent.Preprocessor.BarycentricToTernaryXY.calculate"]], "calculate() (afl.double_agent.preprocessor.destandardize method)": [[41, "AFL.double_agent.Preprocessor.Destandardize.calculate"]], "calculate() (afl.double_agent.preprocessor.extrema method)": [[41, "AFL.double_agent.Preprocessor.Extrema.calculate"]], "calculate() (afl.double_agent.preprocessor.preprocessor method)": [[41, "AFL.double_agent.Preprocessor.Preprocessor.calculate"]], "calculate() (afl.double_agent.preprocessor.savgolfilter method)": [[41, "AFL.double_agent.Preprocessor.SavgolFilter.calculate"]], "calculate() (afl.double_agent.preprocessor.standardize method)": [[41, "AFL.double_agent.Preprocessor.Standardize.calculate"]], "calculate() (afl.double_agent.preprocessor.subtract method)": [[41, "AFL.double_agent.Preprocessor.Subtract.calculate"]], "calculate() (afl.double_agent.preprocessor.subtractmin method)": [[41, "AFL.double_agent.Preprocessor.SubtractMin.calculate"]], "calculate() (afl.double_agent.preprocessor.sympytransform method)": [[41, "AFL.double_agent.Preprocessor.SympyTransform.calculate"]], "calculate() (afl.double_agent.preprocessor.ternaryxytobarycentric method)": [[41, "AFL.double_agent.Preprocessor.TernaryXYToBarycentric.calculate"]], "calculate() (afl.double_agent.preprocessor.varstoarray method)": [[41, "AFL.double_agent.Preprocessor.VarsToArray.calculate"]], "calculate() (afl.double_agent.preprocessor.zscale method)": [[41, "AFL.double_agent.Preprocessor.Zscale.calculate"]], "calculate() (afl.double_agent.preprocessor.zscaleerror method)": [[41, "AFL.double_agent.Preprocessor.ZscaleError.calculate"]], "afl.double_agent.plotting": [[44, "module-AFL.double_agent.plotting"]], "plot_scatter_mpl() (in module afl.double_agent.plotting)": [[44, "AFL.double_agent.plotting.plot_scatter_mpl"]], "plot_surface_mpl() (in module afl.double_agent.plotting)": [[44, "AFL.double_agent.plotting.plot_surface_mpl"]], "afl.double_agent.util": [[45, "module-AFL.double_agent.util"]], "extract_parameters() (in module afl.double_agent.util)": [[45, "AFL.double_agent.util.extract_parameters"]], "listify() (in module afl.double_agent.util)": [[45, "AFL.double_agent.util.listify"]], "afl.double_agent.xarray_extensions": [[46, "module-AFL.double_agent.xarray_extensions"]], "afl_dataarraytools (class in afl.double_agent.xarray_extensions)": [[46, "AFL.double_agent.xarray_extensions.AFL_DataArrayTools"]], "afl_datasettools (class in afl.double_agent.xarray_extensions)": [[46, "AFL.double_agent.xarray_extensions.AFL_DatasetTools"]], "compositiontools (class in afl.double_agent.xarray_extensions)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools"]], "labeltools (class in afl.double_agent.xarray_extensions)": [[46, "AFL.double_agent.xarray_extensions.LabelTools"]], "scatteringtools (class in afl.double_agent.xarray_extensions)": [[46, "AFL.double_agent.xarray_extensions.ScatteringTools"]], "utilities (class in afl.double_agent.xarray_extensions)": [[46, "AFL.double_agent.xarray_extensions.Utilities"]], "add_grid() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.add_grid"]], "append() (afl.double_agent.xarray_extensions.afl_datasettools method)": [[46, "AFL.double_agent.xarray_extensions.AFL_DatasetTools.append"]], "clean() (afl.double_agent.xarray_extensions.scatteringtools method)": [[46, "AFL.double_agent.xarray_extensions.ScatteringTools.clean"]], "get() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.get"]], "get_grid() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.get_grid"]], "get_grid_old() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.get_grid_old"]], "get_range_scaled() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.get_range_scaled"]], "get_standard_scaled() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.get_standard_scaled"]], "make_default() (afl.double_agent.xarray_extensions.labeltools method)": [[46, "AFL.double_agent.xarray_extensions.LabelTools.make_default"]], "make_ordinal() (afl.double_agent.xarray_extensions.labeltools method)": [[46, "AFL.double_agent.xarray_extensions.LabelTools.make_ordinal"]], "plot_3d() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.plot_3D"]], "plot_linlin() (afl.double_agent.xarray_extensions.scatteringtools method)": [[46, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_linlin"]], "plot_loglog() (afl.double_agent.xarray_extensions.scatteringtools method)": [[46, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_loglog"]], "plot_logwaterfall() (afl.double_agent.xarray_extensions.scatteringtools method)": [[46, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_logwaterfall"]], "plot_mask() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.plot_mask"]], "plot_scatter() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.plot_scatter"]], "plot_surface() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.plot_surface"]], "plot_waterfall() (afl.double_agent.xarray_extensions.scatteringtools method)": [[46, "AFL.double_agent.xarray_extensions.ScatteringTools.plot_waterfall"]], "preprocess_data() (afl.double_agent.xarray_extensions.utilities method)": [[46, "AFL.double_agent.xarray_extensions.Utilities.preprocess_data"]], "ternary_to_xy() (afl.double_agent.xarray_extensions.compositiontools method)": [[46, "AFL.double_agent.xarray_extensions.CompositionTools.ternary_to_xy"]]}})